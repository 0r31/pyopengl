<refentry id="glPixelTransfer.3G">
	<refmeta id="glPixelTransfer.3G-meta">
		<refentrytitle>glPixelTransfer</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glPixelTransfer.3G-name">
		<refname>glPixelTransferf</refname>
		<refname>glPixelTransferi</refname>
		<refpurpose>set pixel transfer modes</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glPixelTransfer.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glPixelTransferf</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLfloat&nbsp;<parameter>param</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void&nbsp;<function>glPixelTransferi</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLint&nbsp;<parameter>param</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glPixelTransfer.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>pname</parameter></term>
				<listitem>
					<simpara>
						Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following:
						<constant>GL_MAP_COLOR</constant>, <constant>GL_MAP_STENCIL</constant>,
						<constant>GL_INDEX_SHIFT</constant>, <constant>GL_INDEX_OFFSET</constant>,
						<constant>GL_RED_SCALE</constant>, <constant>GL_RED_BIAS</constant>, <constant>GL_GREEN_SCALE</constant>,
						<constant>GL_GREEN_BIAS</constant>, <constant>GL_BLUE_SCALE</constant>, <constant>GL_BLUE_BIAS</constant>,
						<constant>GL_ALPHA_SCALE</constant>, <constant>GL_ALPHA_BIAS</constant>,
						<constant>GL_DEPTH_SCALE</constant>, or <constant>GL_DEPTH_BIAS</constant>.
					</simpara>
					<simpara>
						Additionally, if the <constant>GL_ARB_imaging</constant> extension is supported, the following symbolic
						names are accepted: <constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant>,
						<constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant>,
						<constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant>,
						<constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant>, <constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant>,
						<constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant>, <constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant>,
						<constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant>, <constant>GL_POST_CONVOLUTION_RED_SCALE</constant>,
						<constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant>, <constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant>,
						<constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant>, <constant>GL_POST_CONVOLUTION_RED_BIAS</constant>,
						<constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant>, <constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant>,
						and <constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>param</parameter></term>
				<listitem>
					<simpara>
						Specifies the value that <parameter>pname</parameter> is set to.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glPixelTransfer.3G-description">
		<title>Description</title>
		<para>
			<function moreinfo="refentry">glPixelTransfer</function> sets pixel transfer modes that affect the operation of
			subsequent <function moreinfo="refentry">glCopyPixels</function>, <function
			moreinfo="refentry">glCopyTexImage1D</function>, <function moreinfo="refentry">glCopyTexImage2D</function>, <function
			moreinfo="refentry">glCopyTexSubImage1D</function>, <function moreinfo="refentry">glCopyTexSubImage2D</function>,
			<function moreinfo="refentry">glCopyTexSubImage3D</function>, <function moreinfo="refentry">glDrawPixels</function>,
			<function moreinfo="refentry">glReadPixels</function>, <function moreinfo="refentry">glTexImage1D</function>, <function
			moreinfo="refentry">glTexImage2D</function>, <function moreinfo="refentry">glTexImage3D</function>, <function
			moreinfo="refentry">glTexSubImage1D</function>, <function moreinfo="refentry">glTexSubImage2D</function>, and <function
			moreinfo="refentry">glTexSubImage3D</function> commands. Additionally, if the <constant>GL_ARB_imaging</constant>
			subset is supported, the routines <function moreinfo="refentry">glColorTable</function>, <function
			moreinfo="refentry">glColorSubTable</function>, <function moreinfo="refentry">glConvolutionFilter1D</function>,
			<function moreinfo="refentry">glConvolutionFilter2D</function>, <function moreinfo="refentry">glHistogram</function>,
			<function moreinfo="refentry">glMinmax</function>, and <function moreinfo="refentry">glSeparableFilter2D</function> are
			also affected. The algorithms that are specified by pixel transfer modes operate on pixels after they are read from the
			frame buffer (<function moreinfo="refentry">glCopyPixels</function> <function
			moreinfo="refentry">glCopyTexImage1D</function>, <function moreinfo="refentry">glCopyTexImage2D</function>, <function
			moreinfo="refentry">glCopyTexSubImage1D</function>, <function moreinfo="refentry">glCopyTexSubImage2D</function>,
			<function moreinfo="refentry">glCopyTexSubImage3D</function>, and <function
			moreinfo="refentry">glReadPixels</function>), or unpacked from client memory (<function
			moreinfo="refentry">glDrawPixels</function>, <function moreinfo="refentry">glTexImage1D</function>, <function
			moreinfo="refentry">glTexImage2D</function>, <function moreinfo="refentry">glTexImage3D</function>, <function
			moreinfo="refentry">glTexSubImage1D</function>, <function moreinfo="refentry">glTexSubImage2D</function>, and <function
			moreinfo="refentry">glTexSubImage3D</function>). Pixel transfer operations happen in the same order, and in the same
			manner, regardless of the command that resulted in the pixel operation. Pixel storage modes (see <citerefentry>
				<refentrytitle>glPixelStore</refentrytitle>
				<manvolnum>3G</manvolnum>
			</citerefentry>) control the unpacking of pixels being read from client memory, and the packing of pixels being written
			back into client memory.
		</para>
		<para>
			Pixel transfer operations handle four fundamental pixel types: <parameter>color</parameter>, <parameter>color
			index</parameter>, <parameter>depth</parameter>, and <parameter>stencil</parameter>. <parameter>Color</parameter>
			pixels consist of four floating-point values with unspecified mantissa and exponent sizes, scaled such that 0
			represents zero intensity and 1 represents full intensity. <parameter>Color indices</parameter> comprise a single
			fixed-point value, with unspecified precision to the right of the binary point. <parameter>Depth</parameter> pixels
			comprise a single floating-point value, with unspecified mantissa and exponent sizes, scaled such that 0.0 represents
			the minimum depth buffer value, and 1.0 represents the maximum depth buffer value. Finally,
			<parameter>stencil</parameter> pixels comprise a single fixed-point value, with unspecified precision to the right of
			the binary point.
		</para>
		<para>
			The pixel transfer operations performed on the four basic pixel types are as follows:
		</para>
		<variablelist>
			<varlistentry>
				<term>Color</term>
				<listitem>
					<simpara>
						Each of the four color components is multiplied by a scale factor, then added to a bias factor. That is,
						the red component is multiplied by <constant>GL_RED_SCALE</constant>, then added to
						<constant>GL_RED_BIAS</constant>; the green component is multiplied by <constant>GL_GREEN_SCALE</constant>,
						then added to <constant>GL_GREEN_BIAS</constant>; the blue component is multiplied by
						<constant>GL_BLUE_SCALE</constant>, then added to <constant>GL_BLUE_BIAS</constant>; and the alpha
						component is multiplied by <constant>GL_ALPHA_SCALE</constant>, then added to
						<constant>GL_ALPHA_BIAS</constant>. After all four color components are scaled and biased, each is clamped
						to the range [0,1]. All color, scale, and bias values are specified with <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
					<simpara>
						If <constant>GL_MAP_COLOR</constant> is true, each color component is scaled by the size of the
						corresponding color-to-color map, then replaced by the contents of that map indexed by the scaled
						component. That is, the red component is scaled by <constant>GL_PIXEL_MAP_R_TO_R_SIZE</constant>, then
						replaced by the contents of <constant>GL_PIXEL_MAP_R_TO_R</constant> indexed by itself. The green component
						is scaled by <constant>GL_PIXEL_MAP_G_TO_G_SIZE</constant>, then replaced by the contents of
						<constant>GL_PIXEL_MAP_G_TO_G</constant> indexed by itself. The blue component is scaled by
						<constant>GL_PIXEL_MAP_B_TO_B_SIZE</constant>, then replaced by the contents of
						<constant>GL_PIXEL_MAP_B_TO_B</constant> indexed by itself. And the alpha component is scaled by
						<constant>GL_PIXEL_MAP_A_TO_A_SIZE</constant>, then replaced by the contents of
						<constant>GL_PIXEL_MAP_A_TO_A</constant> indexed by itself. All components taken from the maps are then
						clamped to the range [0,1]. <constant>GL_MAP_COLOR</constant> is specified with <function
						moreinfo="refentry">glPixelTransfer</function>. The contents of the various maps are specified with
						<function moreinfo="refentry">glPixelMap</function>.
					</simpara>
					<simpara>
						If the <constant>GL_ARB_imaging</constant> extension is supported, each of the four color components may be
						scaled and biased after tranformation by the color matrix. That is, the red component is multiplied by
						<constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant>, then added to
						<constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant>; the green component is multiplied by
						<constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant>, then added to
						<constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant>; the blue component is multiplied by
						<constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant>, then added to
						<constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant>; and the alpha component is multiplied by
						<constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant>, then added to
						<constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant>. After all four color components are scaled and
						biased, each is clamped to the range [0,1].
					</simpara>
					<simpara>
						Similiarly, if the <constant>GL_ARB_imaging</constant> extension is supported, each of the four color
						components may be scaled and biased after processing by the enabled convolution filter. That is, the red
						component is multiplied by <constant>GL_POST_CONVOLUTION_RED_SCALE</constant>, then added to
						<constant>GL_POST_CONVOLUTION_RED_BIAS</constant>; the green component is multiplied by
						<constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant>, then added to
						<constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant>; the blue component is multiplied by
						<constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant>, then added to
						<constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant>; and the alpha component is multiplied by
						<constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant>, then added to
						<constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant>. After all four color components are scaled and biased,
						each is clamped to the range [0,1].
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Color index</term>
				<listitem>
					<simpara>
						Each color index is shifted left by <constant>GL_INDEX_SHIFT</constant> bits; any bits beyond the number of
						fraction bits carried by the fixed-point index are filled with zeros. If
						<constant>GL_INDEX_SHIFT</constant> is negative, the shift is to the right, again zero filled. Then
						<constant>GL_INDEX_OFFSET</constant> is added to the index. <constant>GL_INDEX_SHIFT</constant> and
						<constant>GL_INDEX_OFFSET</constant> are specified with
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			<function moreinfo="refentry">glPixelTransfer</function>.
		</para>
		<para>
			From this point, operation diverges depending on the required of the resulting pixels. If the resulting pixels are to
			be written to a color index buffer, or if they are being read back to client memory in
			<constant>GL_COLOR_INDEX</constant> , the pixels continue to be treated as indices. If
			<constant>GL_MAP_COLOR</constant> is true, each index is masked by <inlineequation>
				<mml:math>
					<mml:mrow>
						<mml:msup>
							<mml:mn>2</mml:mn>
							<mml:mi>n</mml:mi>
						</mml:msup>
						<mml:mo>-</mml:mo>
						<mml:mn>1</mml:mn>
					</mml:mrow>
				</mml:math>
			</inlineequation>, where <inlineequation>
				<mml:math>
					<mml:mi>n</mml:mi>
				</mml:math>
			</inlineequation> is <constant>GL_PIXEL_MAP_I_TO_I_SIZE</constant>, then replaced by the contents of
			<constant>GL_PIXEL_MAP_I_TO_I</constant> indexed by the masked value. <constant>GL_MAP_COLOR</constant> is specified
			with <function moreinfo="refentry">glPixelTransfer</function>. The contents of the index map is specified with
			<function moreinfo="refentry">glPixelMap</function>.
		</para>
		<para>
			If the resulting pixels are to be written to an RGBA color buffer, or if they are read back to client memory in a other
			than <constant>GL_COLOR_INDEX</constant>, the pixels are converted from indices to colors by referencing the four maps
			<constant>GL_PIXEL_MAP_I_TO_R</constant>, <constant>GL_PIXEL_MAP_I_TO_G</constant>,
			<constant>GL_PIXEL_MAP_I_TO_B</constant>, and <constant>GL_PIXEL_MAP_I_TO_A</constant>. Before being dereferenced, the
			index is masked by <inlineequation>
				<mml:math>
					<mml:mrow>
						<mml:msup>
							<mml:mn>2</mml:mn>
							<mml:mi>n</mml:mi>
						</mml:msup>
						<mml:mo>-</mml:mo>
						<mml:mn>1</mml:mn>
					</mml:mrow>
				</mml:math>
			</inlineequation>, where <inlineequation>
				<mml:math>
					<mml:mi>n</mml:mi>
				</mml:math>
			</inlineequation> is <constant>GL_PIXEL_MAP_I_TO_R_SIZE</constant> for the red map,
			<constant>GL_PIXEL_MAP_I_TO_G_SIZE</constant> for the green map, <constant>GL_PIXEL_MAP_I_TO_B_SIZE</constant> for the
			blue map, and <constant>GL_PIXEL_MAP_I_TO_A_SIZE</constant> for the alpha map. All components taken from the maps are
			then clamped to the range [0,1]. The contents of the four maps is specified with <function
			moreinfo="refentry">glPixelMap</function>.
		</para>
		<variablelist>
			<varlistentry>
				<term>Depth</term>
				<listitem>
					<simpara>
						Each depth value is multiplied by <constant>GL_DEPTH_SCALE</constant>, added to
						<constant>GL_DEPTH_BIAS</constant>, then clamped to the range [0,1].
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Stencil</term>
				<listitem>
					<simpara>
						Each index is shifted <constant>GL_INDEX_SHIFT</constant> bits just as a color index is, then added to
						<constant>GL_INDEX_OFFSET</constant>. If <constant>GL_MAP_STENCIL</constant> is true, each index is masked
						by <inlineequation>
							<mml:math>
								<mml:mrow>
									<mml:msup>
										<mml:mn>2</mml:mn>
										<mml:mi>n</mml:mi>
									</mml:msup>
									<mml:mo>-</mml:mo>
									<mml:mn>1</mml:mn>
								</mml:mrow>
							</mml:math>
						</inlineequation>, where <inlineequation>
							<mml:math>
								<mml:mi>n</mml:mi>
							</mml:math>
						</inlineequation> is <constant>GL_PIXEL_MAP_S_TO_S_SIZE</constant>, then replaced by the contents of
						<constant>GL_PIXEL_MAP_S_TO_S</constant> indexed by the masked value.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The following table gives the type, initial value, and range of valid values for each of the pixel transfer parameters
			that are set with <function moreinfo="refentry">glPixelTransfer</function>.
		</para>
		<informaltable frame="topbot">
			<tgroup cols="4">
				<tbody>
					<row>
						<entry><parameter>pname</parameter></entry>
						<entry align="center"><emphasis role="bold">Type</emphasis></entry>
						<entry align="center"><emphasis role="bold">Initial Value</emphasis></entry>
						<entry align="center"><emphasis role="bold">Valid Range</emphasis></entry>
					</row>
					<row>
						<entry><constant>GL_MAP_COLOR</constant></entry>
						<entry align="center">boolean</entry>
						<entry align="center">false</entry>
						<entry align="center">true/false</entry>
					</row>
					<row>
						<entry><constant>GL_MAP_STENCIL</constant></entry>
						<entry align="center">boolean</entry>
						<entry align="center">false</entry>
						<entry align="center">true/false</entry>
					</row>
					<row>
						<entry><constant>GL_INDEX_SHIFT</constant></entry>
						<entry align="center">integer</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_INDEX_OFFSET</constant></entry>
						<entry align="center">integer</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_RED_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_GREEN_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_BLUE_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_ALPHA_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_DEPTH_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_RED_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_GREEN_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_BLUE_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_ALPHA_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_DEPTH_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_RED_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">1</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_RED_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
					<row>
						<entry><constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant></entry>
						<entry align="center">float</entry>
						<entry align="center">0</entry>
						<entry align="center">(-&infin;,&infin;)</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		<para>
			<function>glPixelTransferf</function> can be used to set any pixel transfer parameter. If the parameter type is
			boolean, 0 implies false and any other value implies true. If <parameter>pname</parameter> is an integer parameter,
			<parameter>param</parameter> is rounded to the nearest integer.
		</para>
		<para>
			Likewise, <function>glPixelTransferi</function> can be used to set any of the pixel transfer parameters. Boolean
			parameters are set to false if <parameter>param</parameter> is 0 and to true otherwise. <parameter>param</parameter> is
			converted to floating point before being assigned to real-valued parameters.
		</para>
	</refsect1>
	<refsect1 id="glPixelTransfer.3G-notes">
		<title>Notes</title>
		<para>
			If a <function moreinfo="refentry">glColorTable</function>, <function moreinfo="refentry">glColorSubTable</function>,
			<function moreinfo="refentry">glConvolutionFilter1D</function>, <function
			moreinfo="refentry">glConvolutionFilter2D</function>, <function moreinfo="refentry">glCopyPixels</function>, <function
			moreinfo="refentry">glCopyTexImage1D</function>, <function moreinfo="refentry">glCopyTexImage2D</function>, <function
			moreinfo="refentry">glCopyTexSubImage1D</function>, <function moreinfo="refentry">glCopyTexSubImage2D</function>,
			<function moreinfo="refentry">glCopyTexSubImage3D</function>, <function moreinfo="refentry">glDrawPixels</function>,
			<function moreinfo="refentry">glReadPixels</function>, <function moreinfo="refentry">glSeparableFilter2D</function>,
			<function moreinfo="refentry">glTexImage1D</function>, <function moreinfo="refentry">glTexImage2D</function>, <function
			moreinfo="refentry">glTexImage3D</function>, <function moreinfo="refentry">glTexSubImage1D</function>, <function
			moreinfo="refentry">glTexSubImage2D</function>, or <function moreinfo="refentry">glTexSubImage3D</function>. command is
			placed in a display list (see <citerefentry>
				<refentrytitle>glNewList</refentrytitle>
				<manvolnum>3G</manvolnum>
			</citerefentry> and <function moreinfo="refentry">glCallList</function>), the pixel transfer mode settings in effect
			when the display list is <emphasis>executed</emphasis>are the ones that are used. They may be different from the
			settings when the command was compiled into the display list.
		</para>
	</refsect1>
	<refsect1 id="glPixelTransfer.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>pname</parameter> is not an accepted value.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function moreinfo="refentry">glPixelTransfer</function> is
			executed between the execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of
			<function moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glPixelTransfer.3G-associated_gets">
		<title>Associated Gets</title>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_MAP_COLOR</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_MAP_STENCIL</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_INDEX_SHIFT</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_INDEX_OFFSET</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_RED_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_RED_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_GREEN_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_GREEN_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_BLUE_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_BLUE_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ALPHA_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ALPHA_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_DEPTH_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_DEPTH_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_RED_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_RED_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant>
		</para>
	</refsect1>
	<refsect1 id="glPixelTransfer.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glCallList</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glColorTable</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glColorSubTable</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glConvolutionFilter1D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glConvolutionFilter2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyPixels</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyTexImage1D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyTexImage2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyTexSubImage1D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyTexSubImage2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyTexSubImage3D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glDrawPixels</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glNewList</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPixelMap</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPixelStore</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPixelZoom</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glReadPixels</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexImage1D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexImage2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexImage3D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexSubImage1D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexSubImage2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glTexSubImage3D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
