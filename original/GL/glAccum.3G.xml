<refentry id="glAccum.3G">
	<refmeta id="glAccum.3G-meta">
		<refentrytitle>glAccum</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glAccum.3G-name">
		<refname>glAccum</refname>
		<refpurpose>operate on the accumulation buffer</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glAccum.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glAccum</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>op</parameter></paramdef>
				<paramdef>GLfloat&nbsp;<parameter>value</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glAccum.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>op</parameter></term>
				<listitem>
					<simpara>
						Specifies the accumulation buffer operation. Symbolic constants <constant>GL_ACCUM</constant>,
						<constant>GL_LOAD</constant>, <constant>GL_ADD</constant>, <constant>GL_MULT</constant>, and
						<constant>GL_RETURN</constant> are accepted.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>value</parameter></term>
				<listitem>
					<simpara>
						Specifies a floating-point value used in the accumulation buffer operation. <parameter>op</parameter>
						determines how <parameter>value</parameter> is used.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glAccum.3G-description">
		<title>Description</title>
		<para>
			The accumulation buffer is an extended-range color buffer. Images are not rendered into it. Rather, images rendered
			into one of the color buffers are added to the contents of the accumulation buffer after rendering. Effects such as
			antialiasing (of points, lines, and polygons), motion blur, and depth of field can be created by accumulating images
			generated with different transformation matrices.
		</para>
		<para>
			Each pixel in the accumulation buffer consists of red, green, blue, and alpha values. The number of bits per component
			in the accumulation buffer depends on the implementation. You can examine this number by calling <function
			moreinfo="refentry">glGetIntegerv</function> four times, with arguments <constant>GL_ACCUM_RED_BITS</constant>,
			<constant>GL_ACCUM_GREEN_BITS</constant>, <constant>GL_ACCUM_BLUE_BITS</constant>, and
			<constant>GL_ACCUM_ALPHA_BITS</constant>. Regardless of the number of bits per component, the range of values stored by
			each component is <inlineequation>
				<mml:math>
					<mml:mfenced open="[" close="]">
						<mml:mn>-1</mml:mn>
						<mml:mn>1</mml:mn>
					</mml:mfenced>
				</mml:math>
			</inlineequation>. The accumulation buffer pixels are mapped one-to-one with frame buffer pixels.
		</para>
		<para>
			<function>glAccum</function> operates on the accumulation buffer. The first argument, <parameter>op</parameter>, is a
			symbolic constant that selects an accumulation buffer operation. The second argument, <parameter>value</parameter>, is
			a floating-point value to be used in that operation. Five operations are specified: <constant>GL_ACCUM</constant>,
			<constant>GL_LOAD</constant>, <constant>GL_ADD</constant>, <constant>GL_MULT</constant>, and
			<constant>GL_RETURN</constant>.
		</para>
		<para>
			All accumulation buffer operations are limited to the area of the current scissor box and applied identically to the
			red, green, blue, and alpha components of each pixel. If a <function>glAccum</function> operation results in a value
			outside the range <inlineequation>
				<mml:math>
					<mml:mfenced open="[" close="]">
						<mml:mn>-1</mml:mn>
						<mml:mn>1</mml:mn>
					</mml:mfenced>
				</mml:math>
			</inlineequation>, the contents of an accumulation buffer pixel component are undefined.
		</para>
		<para>
			The operations are as follows:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GL_ACCUM</constant></term>
				<listitem>
					<simpara>
						Obtains R, G, B, and A values from the buffer currently selected for reading (see <citerefentry>
							<refentrytitle>glReadBuffer</refentrytitle>
							<manvolnum>3G</manvolnum>
						</citerefentry>). Each component value is divided by <inlineequation>
							<mml:math>
								<mml:msup>
									<mml:mn>2</mml:mn>
									<mml:mi>n</mml:mi>
								</mml:msup>
								<mml:mo>-</mml:mo>
								<mml:mn>1</mml:mn>
							</mml:math>
						</inlineequation>, where <inlineequation>
							<mml:math>
								<mml:mi>n</mml:mi>
							</mml:math>
						</inlineequation> is the number of bits allocated to each color component in the currently selected buffer.
						The result is a floating-point value in the range <inlineequation>
							<mml:math>
								<mml:mfenced open="[" close="]">
									<mml:mn>0</mml:mn>
									<mml:mn>1</mml:mn>
								</mml:mfenced>
							</mml:math>
						</inlineequation>, which is multiplied by <parameter>value</parameter> and added to the corresponding pixel
						component in the accumulation buffer, thereby updating the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LOAD</constant></term>
				<listitem>
					<simpara>
						Similar to <constant>GL_ACCUM</constant>, except that the current value in the accumulation buffer is not
						used in the calculation of the new value. That is, the R, G, B, and A values from the currently selected
						buffer are divided by <inlineequation>
							<mml:math>
								<mml:msup>
									<mml:mn>2</mml:mn>
									<mml:mi>n</mml:mi>
								</mml:msup>
								<mml:mo>-</mml:mo>
								<mml:mn>1</mml:mn>
							</mml:math>
						</inlineequation>, multiplied by <parameter>value</parameter>, and then stored in the corresponding
						accumulation buffer cell, overwriting the current value.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ADD</constant></term>
				<listitem>
					<simpara>
						Adds <parameter>value</parameter> to each R, G, B, and A in the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MULT</constant></term>
				<listitem>
					<simpara>
						Multiplies each R, G, B, and A in the accumulation buffer by <parameter>value</parameter> and returns the
						scaled component to its corresponding accumulation buffer location.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RETURN</constant></term>
				<listitem>
					<simpara>
						Transfers accumulation buffer values to the color buffer or buffers currently selected for writing. Each R,
						G, B, and A component is multiplied by <parameter>value</parameter>, then multiplied by <inlineequation>
							<mml:math>
								<mml:msup>
									<mml:mn>2</mml:mn>
									<mml:mi>n</mml:mi>
								</mml:msup>
								<mml:mo>-</mml:mo>
								<mml:mn>1</mml:mn>
							</mml:math>
						</inlineequation>, clamped to the range <inlineequation>
							<mml:math>
								<mml:mfenced open="[" close="]">
									<mml:mn>0</mml:mn>
									<mml:mrow>
										<mml:msup>
											<mml:mn>2</mml:mn>
											<mml:mi>n</mml:mi>
										</mml:msup>
										<mml:mo>-</mml:mo>
										<mml:mn>1</mml:mn>
									</mml:mrow>
								</mml:mfenced>
							</mml:math>
						</inlineequation>, and stored in the corresponding display buffer cell. The only fragment operations that
						are applied to this transfer are pixel ownership, scissor, dithering, and color writemasks.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			To clear the accumulation buffer, call <function moreinfo="refentry">glClearAccum</function> with R, G, B, and A values
			to set it to, then call <function moreinfo="refentry">glClear</function> with the accumulation buffer enabled.
		</para>
	</refsect1>
	<refsect1 id="glAccum.3G-notes">
		<title>Notes</title>
		<para>
			Only pixels within the current scissor box are updated by a <function>glAccum</function> operation.
		</para>
	</refsect1>
	<refsect1 id="glAccum.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>op</parameter> is not an accepted value.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if there is no accumulation buffer.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glAccum</function> is executed between the
			execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glAccum.3G-associated_gets">
		<title>Associated Gets</title>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ACCUM_RED_BITS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ACCUM_GREEN_BITS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ACCUM_BLUE_BITS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_ACCUM_ALPHA_BITS</constant>
		</para>
	</refsect1>
	<refsect1 id="glAccum.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glClear</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glClearAccum</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glCopyPixels</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glDrawBuffer</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGet</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glReadBuffer</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glReadPixels</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glScissor</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glStencilOp</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
