<refentry id="glCopyConvolutionFilter2D.3G">
	<refmeta id="glCopyConvolutionFilter2D.3G-meta">
		<refentrytitle>glCopyConvolutionFilter2D</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glCopyConvolutionFilter2D.3G-name">
		<refname>glCopyConvolutionFilter2D</refname>
		<refpurpose>copy pixels into a two-dimensional convolution filter</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glCopyConvolutionFilter2D.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glCopyConvolutionFilter2D</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>target</parameter></paramdef>
				<paramdef>GLenum&nbsp;<parameter>internalformat</parameter></paramdef>
				<paramdef>GLint&nbsp;<parameter>x</parameter></paramdef>
				<paramdef>GLint&nbsp;<parameter>y</parameter></paramdef>
				<paramdef>GLsizei&nbsp;<parameter>width</parameter></paramdef>
				<paramdef>GLsizei&nbsp;<parameter>height</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glCopyConvolutionFilter2D.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>target</parameter></term>
				<listitem>
					<simpara>
						Must be <constant>GL_CONVOLUTION_2D</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>internalformat</parameter></term>
				<listitem>
					<simpara>
						The internal of the convolution filter kernel. The allowable values are <constant>GL_ALPHA</constant>,
						<constant>GL_ALPHA4</constant>, <constant>GL_ALPHA8</constant>, <constant>GL_ALPHA12</constant>,
						<constant>GL_ALPHA16</constant>, <constant>GL_LUMINANCE</constant>, <constant>GL_LUMINANCE4</constant>,
						<constant>GL_LUMINANCE8</constant>, <constant>GL_LUMINANCE12</constant>,
						<constant>GL_LUMINANCE16</constant>, <constant>GL_LUMINANCE_ALPHA</constant>,
						<constant>GL_LUMINANCE4_ALPHA4</constant>, <constant>GL_LUMINANCE6_ALPHA2</constant>,
						<constant>GL_LUMINANCE8_ALPHA8</constant>, <constant>GL_LUMINANCE12_ALPHA4</constant>,
						<constant>GL_LUMINANCE12_ALPHA12</constant>, <constant>GL_LUMINANCE16_ALPHA16</constant>,
						<constant>GL_INTENSITY</constant>, <constant>GL_INTENSITY4</constant>, <constant>GL_INTENSITY8</constant>,
						<constant>GL_INTENSITY12</constant>, <constant>GL_INTENSITY16</constant>, <constant>GL_R3_G3_B2</constant>,
						<constant>GL_RGB</constant>, <constant>GL_RGB4</constant>, <constant>GL_RGB5</constant>,
						<constant>GL_RGB8</constant>, <constant>GL_RGB10</constant>, <constant>GL_RGB12</constant>,
						<constant>GL_RGB16</constant>, <constant>GL_RGBA</constant>, <constant>GL_RGBA2</constant>,
						<constant>GL_RGBA4</constant>, <constant>GL_RGB5_A1</constant>, <constant>GL_RGBA8</constant>,
						<constant>GL_RGB10_A2</constant>, <constant>GL_RGBA12</constant>, or <constant>GL_RGBA16</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>x</parameter>, <parameter>y</parameter></term>
				<listitem>
					<simpara>
						The window space coordinates of the lower-left coordinate of the pixel array to copy.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>width</parameter></term>
				<listitem>
					<simpara>
						The width of the pixel array to copy.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>height</parameter></term>
				<listitem>
					<simpara>
						The height of the pixel array to copy.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glCopyConvolutionFilter2D.3G-description">
		<title>Description</title>
		<para>
			<function>glCopyConvolutionFilter2D</function> defines a two-dimensional convolution filter kernel with pixels from the
			current <constant>GL_READ_BUFFER</constant> (rather than from main memory, as is the case for <function
			moreinfo="refentry">glConvolutionFilter2D</function>). The screen-aligned pixel rectangle with lower-left corner at
			(<parameter>x</parameter>,<parameter>y</parameter>), width <parameter>width</parameter> and height
			<parameter>height</parameter> is used to define the convolution filter. If any pixels within this region are outside
			the window that is associated with the GL context, the values obtained for those pixels are undefined. The pixels in
			the rectangle are processed exactly as if <function moreinfo="refentry">glReadPixels</function> had been called with
			<parameter>format</parameter> set to RGBA, but the process stops just before final conversion. The R, G, B, and A
			components of each pixel are next scaled by the four 2D <constant>GL_CONVOLUTION_FILTER_SCALE</constant> parameters and
			biased by the four 2D <constant>GL_CONVOLUTION_FILTER_BIAS</constant> parameters. (The scale and bias parameters are
			set by <function moreinfo="refentry">glConvolutionParameter</function> using the <constant>GL_CONVOLUTION_2D</constant>
			target and the names <constant>GL_CONVOLUTION_FILTER_SCALE</constant> and
			<constant>GL_CONVOLUTION_FILTER_BIAS</constant>. The parameters themselves are vectors of four values that are applied
			to red, green, blue, and alpha, in that order.) The R, G, B, and A values are not clamped to [0,1] at any time during
			this process. Each pixel is then converted to the internal specified by <parameter>internalformat</parameter>. This
			conversion simply maps the component values of the pixel (R, G, B, and A) to the values included in the internal (red,
			green, blue, alpha, luminance, and intensity). The mapping is as follows:
		</para>
		<informaltable frame="topbot">
			<tgroup cols="7">
				<colspec>
				</colspec>
				<colspec align="center">
				</colspec>
				<colspec align="center">
				</colspec>
				<colspec align="center">
				</colspec>
				<colspec align="center">
				</colspec>
				<colspec align="center">
				</colspec>
				<colspec align="center">
				</colspec>
				<thead>
					<row rowsep="1">
						<entry><emphasis role="bold">Internal Format</emphasis></entry>
						<entry><emphasis role="bold">Red</emphasis></entry>
						<entry><emphasis role="bold">Green</emphasis></entry>
						<entry><emphasis role="bold">Blue</emphasis></entry>
						<entry><emphasis role="bold">Alpha</emphasis></entry>
						<entry><emphasis role="bold">Luminance</emphasis></entry>
						<entry><emphasis role="bold">Intensity</emphasis></entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><constant>GL_ALPHA</constant></entry>
						<entry/>
						<entry/>
						<entry/>
						<entry>A</entry>
						<entry/>
						<entry/>
					</row>
					<row>
						<entry><constant>GL_LUMINANCE</constant></entry>
						<entry/>
						<entry/>
						<entry/>
						<entry>R</entry>
						<entry/>
						<entry/>
					</row>
					<row>
						<entry><constant>GL_LUMINANCE_ALPHA</constant></entry>
						<entry/>
						<entry/>
						<entry>A</entry>
						<entry>R</entry>
						<entry/>
						<entry/>
					</row>
					<row>
						<entry><constant>GL_INTENSITY</constant></entry>
						<entry/>
						<entry/>
						<entry/>
						<entry/>
						<entry/>
						<entry>R</entry>
					</row>
					<row>
						<entry><constant>GL_RGB</constant></entry>
						<entry>R</entry>
						<entry>G</entry>
						<entry>B</entry>
						<entry/>
						<entry/>
						<entry/>
					</row>
					<row>
						<entry><constant>GL_RGBA</constant></entry>
						<entry>R</entry>
						<entry>G</entry>
						<entry>B</entry>
						<entry>A</entry>
						<entry/>
						<entry/>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		<para>
			The red, green, blue, alpha, luminance, and/or intensity components of the resulting pixels are stored in
			floating-point rather than integer Pixel ordering is such that lower x screen coordinates correspond to lower
			<parameter>i</parameter> filter image coordinates, and lower y screen coordinates correspond to lower
			<parameter>j</parameter> filter image coordinates.
		</para>
		<para>
			Note that after a convolution is performed, the resulting color components are also scaled by their corresponding
			<constant>GL_POST_CONVOLUTION_c_SCALE</constant> parameters and biased by their corresponding
			<constant>GL_POST_CONVOLUTION_c_BIAS</constant> parameters (where <parameter>c</parameter> takes on the values
			<emphasis role="bold">RED</emphasis>, <emphasis role="bold">GREEN</emphasis>, <emphasis role="bold">BLUE</emphasis>,
			and <emphasis role="bold">ALPHA</emphasis>). These parameters are set by <function
			moreinfo="refentry">glPixelTransfer</function>.
		</para>
	</refsect1>
	<refsect1 id="glCopyConvolutionFilter2D.3G-notes">
		<title>Notes</title>
		<para>
			<function>glCopyConvolutionFilter2D</function> is present only if <constant>GL_ARB_imaging</constant> is returned when
			<function moreinfo="refentry">glGetString</function> is called with an argument of <constant>GL_EXTENSIONS</constant>.
		</para>
	</refsect1>
	<refsect1 id="glCopyConvolutionFilter2D.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not
			<constant>GL_CONVOLUTION_2D</constant>.
		</para>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>internalformat</parameter> is not one of the allowable
			values.
		</para>
		<para>
			<constant>GL_INVALID_VALUE</constant> is generated if <parameter>width</parameter> is less than zero or greater than
			the maximum supported value. This value may be queried with <function
			moreinfo="refentry">glGetConvolutionParameter</function> using target <constant>GL_CONVOLUTION_2D</constant> and name
			<constant>GL_MAX_CONVOLUTION_WIDTH</constant>.
		</para>
		<para>
			<constant>GL_INVALID_VALUE</constant> is generated if <parameter>height</parameter> is less than zero or greater than
			the maximum supported value. This value may be queried with <function
			moreinfo="refentry">glGetConvolutionParameter</function> using target <constant>GL_CONVOLUTION_2D</constant> and name
			<constant>GL_MAX_CONVOLUTION_HEIGHT</constant>.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glCopyConvolutionFilter2D</function> is executed
			between the execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glCopyConvolutionFilter2D.3G-associated_gets">
		<title>Associated Gets</title>
		<para>
			<function moreinfo="refentry">glGetConvolutionParameter</function>, <function
			moreinfo="refentry">glGetConvolutionFilter</function>
		</para>
	</refsect1>
	<refsect1 id="glCopyConvolutionFilter2D.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glConvolutionFilter2D</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glConvolutionParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPixelTransfer</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
