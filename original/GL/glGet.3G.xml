<refentry id="glGet.3G">
	<refmeta id="glGet.3G-meta">
		<refentrytitle>glGet</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glGet.3G-name">
		<refname>glGetBooleanv</refname>
		<refname>glGetDoublev</refname>
		<refname>glGetFloatv</refname>
		<refname>glGetIntegerv</refname>
		<refpurpose>return the value or values of a selected parameter</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glGet.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glGetBooleanv</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLboolean&nbsp;*<parameter>params</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void&nbsp;<function>glGetDoublev</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLdouble&nbsp;*<parameter>params</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void&nbsp;<function>glGetFloatv</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLfloat&nbsp;*<parameter>params</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>void&nbsp;<function>glGetIntegerv</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>pname</parameter></paramdef>
				<paramdef>GLint&nbsp;*<parameter>params</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glGet.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>pname</parameter></term>
				<listitem>
					<simpara>
						Specifies the parameter value to be returned. The symbolic constants in the list below are accepted.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>params</parameter></term>
				<listitem>
					<simpara>
						Returns the value or values of the specified parameter.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glGet.3G-description">
		<title>Description</title>
		<para>
			These four commands return values for simple state variables in GL. <parameter>pname</parameter> is a symbolic constant
			indicating the state variable to be returned, and <parameter>params</parameter> is a pointer to an array of the
			indicated type in which to place the returned data.
		</para>
		<para>
			Type conversion is performed if <parameter>params</parameter> has a different type than the state variable value being
			requested. If <function>glGetBooleanv</function> is called, a floating-point (or integer) value is converted to
			<constant>GL_FALSE</constant> if and only if it is 0.0 (or 0). Otherwise, it is converted to
			<constant>GL_TRUE</constant>. If <function>glGetIntegerv</function> is called, boolean values are returned as
			<constant>GL_TRUE</constant> or <constant>GL_FALSE</constant>, and most floating-point values are rounded to the
			nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to
			the most positive representable integer value, and -1.0 to the most negative representable integer value. If
			<function>glGetFloatv</function> or <function>glGetDoublev</function> is called, boolean values are returned as
			<constant>GL_TRUE</constant> or <constant>GL_FALSE</constant>, and integer values are converted to floating-point
			values.
		</para>
		<para>
			The following symbolic constants are accepted by <parameter>pname</parameter>:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GL_ACCUM_ALPHA_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of alpha bitplanes in the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ACCUM_BLUE_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of blue bitplanes in the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ACCUM_CLEAR_VALUE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha values used to clear the
						accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point
						representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the
						most negative representable integer value. The initial value is (0, 0, 0, 0). See <function
						moreinfo="refentry">glClearAccum</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ACCUM_GREEN_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of green bitplanes in the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ACCUM_RED_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of red bitplanes in the accumulation buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ACTIVE_TEXTURE_ARB</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single value indicating the active multitexture unit. The initial
						value is <constant>GL_TEXTURE0_ARB</constant>. See <function
						moreinfo="refentry">glActiveTextureARB</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALIASED_POINT_SIZE_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values, the smallest and largest supported sizes for aliased
						points.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALIASED_LINE_WIDTH_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values, the smallest and largest supported widths for aliased
						lines.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha bias factor used during pixel transfers. The
						initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of alpha bitplanes in each color buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha scale factor used during pixel transfers. The
						initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_TEST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether alpha testing of fragments
						is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glAlphaFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_TEST_FUNC</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the symbolic name of the alpha test function. The initial
						value is <constant>GL_ALWAYS</constant>. See <function moreinfo="refentry">glAlphaFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALPHA_TEST_REF</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the reference value for the alpha test. The initial value
						is 0. See <function moreinfo="refentry">glAlphaFunc</function>. An integer value, if requested, is linearly
						mapped from the internal floating-point representation such that 1.0 returns the most positive
						representable integer value, and -1.0 returns the most negative representable integer value.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ATTRIB_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the depth of the attribute stack. If the stack is empty, 0
						is returned. The initial value is 0. See <function moreinfo="refentry">glPushAttrib</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_AUTO_NORMAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D map evaluation
						automatically generates surface normals. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_AUX_BUFFERS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of auxiliary color buffers. The initial value
						is 0.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLEND</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether blending is enabled. The
						initial value is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glBlendFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLEND_COLOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values, the red, green, blue, and alpha values which are the
						components of the blend color. See <function moreinfo="refentry">glBlendColor</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLEND_DST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the symbolic constant identifying the destination blend
						function. The initial value is <constant>GL_ZERO</constant>. See <function
						moreinfo="refentry">glBlendFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLEND_EQUATION</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating whether the blend equation
						is <constant>GL_FUNC_ADD</constant>, <constant>GL_MIN</constant> or <constant>GL_MAX</constant>. See
						<function moreinfo="refentry">glBlendEquation</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLEND_SRC</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the symbolic constant identifying the source blend
						function. The initial value is <constant>GL_ONE</constant>. See <function
						moreinfo="refentry">glBlendFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLUE_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue bias factor used during pixel transfers. The
						initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLUE_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of blue bitplanes in each color buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_BLUE_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue scale factor used during pixel transfers. The
						initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CLIENT_ACTIVE_TEXTURE_ARB</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single integer value indicating the current client active
						multitexture unit. The initial value is <constant>GL_TEXTURE0_ARB</constant>. See <function
						moreinfo="refentry">glClientActiveTextureARB</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CLIENT_ATTRIB_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value indicating the depth of the attribute stack. The initial
						value is 0. See <function moreinfo="refentry">glPushClientAttrib</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CLIP_PLANE</constant><parameter>i</parameter></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the specified clipping
						plane is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glClipPlane</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the color array is enabled.
						The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glColorPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_ARRAY_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of components per color in the color array. The
						initial value is 4. See <function moreinfo="refentry">glColorPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive colors in the color
						array. The initial value is 0. See <function moreinfo="refentry">glColorPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_ARRAY_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the data type of each component in the color array. The
						initial value is <constant>GL_FLOAT</constant>. See <function
						moreinfo="refentry">glColorPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_CLEAR_VALUE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha values used to clear the
						color buffers. Integer values, if requested, are linearly mapped from the internal floating-point
						representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the
						most negative representable integer value. The initial value is (0, 0, 0, 0). See <function
						moreinfo="refentry">glClearColor</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_LOGIC_OP</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether a fragment's RGBA color
						values are merged into the framebuffer using a logical operation. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glLogicOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_MATERIAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether one or more material
						parameters are tracking the current color. The initial value is <constant>GL_FALSE</constant>. See
						<function moreinfo="refentry">glColorMaterial</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_MATERIAL_FACE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which materials have a
						parameter that is tracking the current color. The initial value is <constant>GL_FRONT_AND_BACK</constant>.
						See <function moreinfo="refentry">glColorMaterial</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_MATERIAL_PARAMETER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which material parameters
						are tracking the current color. The initial value is <constant>GL_AMBIENT_AND_DIFFUSE</constant>. See
						<function moreinfo="refentry">glColorMaterial</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_MATRIX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns sixteen values: the color matrix on the top of the color matrix
						stack. Initially this matrix is the identity matrix. See <function
						moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_MATRIX_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the projection matrix
						stack. The value must be at least 2. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_TABLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the color table lookup is
						enabled. See <function moreinfo="refentry">glColorTable</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_COLOR_WRITEMASK</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four boolean values: the red, green, blue, and alpha write enables
						for the color buffers. The initial value is (<constant>GL_TRUE</constant>, <constant>GL_TRUE</constant>,
						<constant>GL_TRUE</constant>, <constant>GL_TRUE</constant>). See <function
						moreinfo="refentry">glColorMask</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CONVOLUTION_1D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D convolution is enabled.
						The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glConvolutionFilter1D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CONVOLUTION_2D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D convolution is enabled.
						The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glConvolutionFilter2D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CULL_FACE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether polygon culling is enabled.
						The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glCullFace</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CULL_FACE_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which polygon faces are to
						be culled. The initial value is <constant>GL_BACK</constant>. See <function
						moreinfo="refentry">glCullFace</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_COLOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha values of the current
						color. Integer values, if requested, are linearly mapped from the internal floating-point representation
						such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative
						representable integer value. See <function moreinfo="refentry">glColor</function>. The initial value is (1,
						1, 1, 1).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the current color index. The initial value is 1. See
						<function moreinfo="refentry">glIndex</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_NORMAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns three values: the <parameter>x</parameter>, <parameter>y</parameter>,
						and <parameter>z</parameter> values of the current normal. Integer values, if requested, are linearly
						mapped from the internal floating-point representation such that 1.0 returns the most positive
						representable integer value, and -1.0 returns the most negative representable integer value. The initial
						value is (0, 0, 1). See <function moreinfo="refentry">glNormal</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_COLOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha values of the current
						raster position. Integer values, if requested, are linearly mapped from the internal floating-point
						representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the
						most negative representable integer value. The initial value is (1, 1, 1, 1). See <function
						moreinfo="refentry">glRasterPos</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_DISTANCE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the distance from the eye to the current raster position.
						The initial value is 0. See <function moreinfo="refentry">glRasterPos</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the color index of the current raster position. The
						initial value is 1. See <function moreinfo="refentry">glRasterPos</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_POSITION</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the <parameter>x</parameter>, <parameter>y</parameter>,
						<parameter>z</parameter>, and <parameter>w</parameter> components of the current raster position.
						<parameter>x</parameter>, <parameter>y</parameter>, and <parameter>z</parameter> are in window coordinates,
						and <parameter>w</parameter> is in clip coordinates. The initial value is (0, 0, 0, 1). See <function
						moreinfo="refentry">glRasterPos</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_POSITION_VALID</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the current raster position
						is valid. The initial value is <constant>GL_TRUE</constant>. See <function
						moreinfo="refentry">glRasterPos</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_RASTER_TEXTURE_COORDS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the <parameter>s</parameter>, <parameter>t</parameter>,
						<parameter>r</parameter>, and <parameter>q</parameter> current raster texture coordinates. The initial
						value is (0, 0, 0, 1). See <function moreinfo="refentry">glRasterPos</function> and <function
						moreinfo="refentry">glTexCoord</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_CURRENT_TEXTURE_COORDS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the <parameter>s</parameter>, <parameter>t</parameter>,
						<parameter>r</parameter>, and <parameter>q</parameter> current texture coordinates. The initial value is
						(0, 0, 0, 1). See <function moreinfo="refentry">glTexCoord</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the depth bias factor used during pixel transfers. The
						initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of bitplanes in the depth buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_CLEAR_VALUE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the value that is used to clear the depth buffer. Integer
						values, if requested, are linearly mapped from the internal floating-point representation such that 1.0
						returns the most positive representable integer value, and -1.0 returns the most negative representable
						integer value. The initial value is 1. See <function moreinfo="refentry">glClearDepth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_FUNC</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the symbolic constant that indicates the depth comparison
						function. The initial value is <constant>GL_LESS</constant>. See <function
						moreinfo="refentry">glDepthFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the near and far mapping limits for the depth buffer.
						Integer values, if requested, are linearly mapped from the internal floating-point representation such that
						1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable
						integer value. The initial value is (0, 1). See <function moreinfo="refentry">glDepthRange</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the depth scale factor used during pixel transfers. The
						initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_TEST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether depth testing of fragments
						is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glDepthFunc</function> and <function moreinfo="refentry">glDepthRange</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DEPTH_WRITEMASK</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating if the depth buffer is enabled for
						writing. The initial value is <constant>GL_TRUE</constant>. See <function
						moreinfo="refentry">glDepthMask</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DITHER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether dithering of fragment
						colors and indices is enabled. The initial value is <constant>GL_TRUE</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DOUBLEBUFFER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether double buffering is
						supported.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DRAW_BUFFER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which buffers are being
						drawn to. See <function moreinfo="refentry">glDrawBuffer</function>. The initial value is
						<constant>GL_BACK</constant> if there are back buffers, otherwise it is <constant>GL_FRONT</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_EDGE_FLAG</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the current edge flag is
						<constant>GL_TRUE</constant> or <constant>GL_FALSE</constant>. The initial value is
						<constant>GL_TRUE</constant>. See <function moreinfo="refentry">glEdgeFlag</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_EDGE_FLAG_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the edge flag array is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glEdgeFlagPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_EDGE_FLAG_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive edge flags in the edge
						flag array. The initial value is 0. See <function moreinfo="refentry">glEdgeFlagPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FEEDBACK_BUFFER_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the feedback buffer. See <function
						moreinfo="refentry">glFeedbackBuffer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FEEDBACK_BUFFER_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the type of the feedback buffer. See <function
						moreinfo="refentry">glFeedbackBuffer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether fogging is enabled. The
						initial value is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_COLOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha components of the fog
						color. Integer values, if requested, are linearly mapped from the internal floating-point representation
						such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative
						representable integer value. The initial value is (0, 0, 0, 0). See <function
						moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_DENSITY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the fog density parameter. The initial value is 1. See
						<function moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_END</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the end factor for the linear fog equation. The initial
						value is 1. See <function moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_HINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the mode of the fog hint.
						The initial value is <constant>GL_DONT_CARE</constant>. See <function
						moreinfo="refentry">glHint</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the fog color index. The initial value is 0. See <function
						moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which fog equation is
						selected. The initial value is <constant>GL_EXP</constant>. See <function
						moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FOG_START</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the start factor for the linear fog equation. The initial
						value is 0. See <function moreinfo="refentry">glFog</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_FRONT_FACE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating whether clockwise or
						counterclockwise polygon winding is treated as front-facing. The initial value is
						<constant>GL_CCW</constant>. See <function moreinfo="refentry">glFrontFace</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_GREEN_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green bias factor used during pixel transfers. The
						initial value is 0.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_GREEN_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of green bitplanes in each color buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_GREEN_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green scale factor used during pixel transfers. The
						initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_HISTOGRAM</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether histogram is enabled. The
						initial value is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glHistogram</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the color index array is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glIndexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive color indexes in the
						color index array. The initial value is 0. See <function moreinfo="refentry">glIndexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_ARRAY_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the data type of indexes in the color index array. The
						initial value is <constant>GL_FLOAT</constant>. See <function
						moreinfo="refentry">glIndexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of bitplanes in each color index buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_CLEAR_VALUE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the color index used to clear the color index buffers. The
						initial value is 0. See <function moreinfo="refentry">glClearIndex</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_LOGIC_OP</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether a fragment's index values
						are merged into the framebuffer using a logical operation. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glLogicOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the GL is in color index
						mode (<constant>GL_TRUE</constant>) or RGBA mode (<constant>GL_FALSE</constant>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_OFFSET</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the offset added to color and stencil indices during pixel
						transfers. The initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_SHIFT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the amount that color and stencil indices are shifted
						during pixel transfers. The initial value is 0. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_INDEX_WRITEMASK</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a mask indicating which bitplanes of each color index
						buffer can be written. The initial value is all 1's. See <function
						moreinfo="refentry">glIndexMask</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHT</constant><parameter>i</parameter></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the specified light is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glLight</function> and <function moreinfo="refentry">glLightModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHTING</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether lighting is enabled. The
						initial value is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glLightModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHT_MODEL_AMBIENT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the red, green, blue, and alpha components of the
						ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal
						floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0
						returns the most negative representable integer value. The initial value is (0.2, 0.2, 0.2, 1.0). See
						<function moreinfo="refentry">glLightModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHT_MODEL_COLOR_CONTROL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns single enumerated value indicating whether specular reflection
						calculations are separated from normal lighting computations. The initial value is
						<constant>GL_SINGLE_COLOR</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHT_MODEL_LOCAL_VIEWER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether specular reflection
						calculations treat the viewer as being local to the scene. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glLightModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIGHT_MODEL_TWO_SIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether separate materials are used
						to compute lighting for front- and back-facing polygons. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glLightModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_SMOOTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether antialiasing of lines is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glLineWidth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the mode of the line
						antialiasing hint. The initial value is <constant>GL_DONT_CARE</constant>. See <function
						moreinfo="refentry">glHint</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_STIPPLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether stippling of lines is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glLineStipple</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_STIPPLE_PATTERN</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the 16-bit line stipple pattern. The initial value is all
						1's. See <function moreinfo="refentry">glLineStipple</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_STIPPLE_REPEAT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the line stipple repeat factor. The initial value is 1.
						See <function moreinfo="refentry">glLineStipple</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_WIDTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the line width as specified with <function
						moreinfo="refentry">glLineWidth</function>. The initial value is 1.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_WIDTH_GRANULARITY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the width difference between adjacent supported widths for
						antialiased lines. See <function moreinfo="refentry">glLineWidth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_WIDTH_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the smallest and largest supported widths for antialiased
						lines. See <function moreinfo="refentry">glLineWidth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIST_BASE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the base offset added to all names in arrays presented to
						<function moreinfo="refentry">glCallLists</function>. The initial value is 0. See <function
						moreinfo="refentry">glListBase</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIST_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the name of the display list currently under construction.
						0 is returned if no display list is currently under construction. The initial value is 0. See <function
						moreinfo="refentry">glNewList</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LIST_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the construction mode of
						the display list currently under construction. The initial value is 0. See <function
						moreinfo="refentry">glNewList</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LOGIC_OP_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the selected logic
						operation mode. The initial value is <constant>GL_COPY</constant>. See <function
						moreinfo="refentry">glLogicOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_COLOR_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates
						colors. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_GRID_DOMAIN</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the endpoints of the 1D map's grid domain. The initial
						value is (0, 1). See <function moreinfo="refentry">glMapGrid</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_GRID_SEGMENTS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of partitions in the 1D map's grid domain. The
						initial value is 1. See <function moreinfo="refentry">glMapGrid</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates
						color indices. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_NORMAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates
						normals. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_TEXTURE_COORD_1</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 1D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_TEXTURE_COORD_2</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 2D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_TEXTURE_COORD_3</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 3D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_TEXTURE_COORD_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 4D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_VERTEX_3</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 3D
						vertex coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP1_VERTEX_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D evaluation generates 4D
						vertex coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap1</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_COLOR_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates
						colors. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_GRID_DOMAIN</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the endpoints of the 2D map's <inlineequation>
							<mml:math>
								<mml:mi>i</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>j</mml:mi>
							</mml:math>
						</inlineequation> grid domains. The initial value is (0,1; 0,1). See <function
						moreinfo="refentry">glMapGrid</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_GRID_SEGMENTS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the number of partitions in the 2D map's <inlineequation>
							<mml:math>
								<mml:mi>i</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>j</mml:mi>
							</mml:math>
						</inlineequation> grid domains. The initial value is (1,1). See <function
						moreinfo="refentry">glMapGrid</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_INDEX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates
						color indices. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_NORMAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates
						normals. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_TEXTURE_COORD_1</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 1D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_TEXTURE_COORD_2</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 2D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_TEXTURE_COORD_3</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 3D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_TEXTURE_COORD_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 4D
						texture coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_VERTEX_3</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 3D
						vertex coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP2_VERTEX_4</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D evaluation generates 4D
						vertex coordinates. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP_COLOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating if colors and color indices are to
						be replaced by table lookup during pixel transfers. The initial value is <constant>GL_FALSE</constant>. See
						<function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAP_STENCIL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating if stencil indices are to be
						replaced by table lookup during pixel transfers. The initial value is <constant>GL_FALSE</constant>. See
						<function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MATRIX_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which matrix stack is
						currently the target of all matrix operations. The initial value is <constant>GL_MODELVIEW</constant>. See
						<function moreinfo="refentry">glMatrixMode</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_3D_TEXTURE_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a rough estimate of the largest 3D texture that the GL can
						handle. If the GL version is 1.2 or greater, use <constant>GL_PROXY_TEXTURE_3D</constant> to determine if a
						texture is too large. See <function moreinfo="refentry">glTexImage3D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_CLIENT_ATTRIB_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value indicating the maximum supported depth of the client
						attribute stack. See <function moreinfo="refentry">glPushClientAttrib</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_ATTRIB_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the attribute stack. The
						value must be at least 16. See <function moreinfo="refentry">glPushAttrib</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_CLIP_PLANES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum number of application-defined clipping planes.
						The value must be at least 6. See <function moreinfo="refentry">glClipPlane</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_COLOR_MATRIX_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the color matrix stack. The
						value must be at least 2. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_ELEMENTS_INDICES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the recommended maximum number of vertex array indices.
						See <function moreinfo="refentry">glDrawRangeElements</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_ELEMENTS_VERTICES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the recommended maximum number of vertex array vertices.
						See <function moreinfo="refentry">glDrawRangeElements</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_EVAL_ORDER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum equation order supported by 1D and 2D
						evaluators. The value must be at least 8. See <function moreinfo="refentry">glMap1</function> and <function
						moreinfo="refentry">glMap2</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_LIGHTS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum number of lights. The value must be at least
						8. See <function moreinfo="refentry">glLight</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_LIST_NESTING</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum recursion depth allowed during display-list
						traversal. The value must be at least 64. See <function moreinfo="refentry">glCallList</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_MODELVIEW_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the modelview matrix stack.
						The value must be at least 32. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_NAME_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the selection name stack.
						The value must be at least 64. See <function moreinfo="refentry">glPushName</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_PIXEL_MAP_TABLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported size of a <function
						moreinfo="refentry">glPixelMap</function> lookup table. The value must be at least 32. See <function
						moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_PROJECTION_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the projection matrix
						stack. The value must be at least 2. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_TEXTURE_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value. The value gives a rough estimate of the largest texture
						that the GL can handle. If the GL version is 1.1 or greater, use <constant>GL_PROXY_TEXTURE_1D</constant>
						or <constant>GL_PROXY_TEXTURE_2D</constant> to determine if a texture is too large. See <function
						moreinfo="refentry">glTexImage1D</function> and <function moreinfo="refentry">glTexImage2D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_TEXTURE_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the maximum supported depth of the texture matrix stack.
						The value must be at least 2. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_TEXTURE_UNITS_ARB</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single value indicating the number of texture units supported. The
						value must be at least 1. See <function moreinfo="refentry">glActiveTextureARB</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MAX_VIEWPORT_DIMS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the maximum supported width and height of the viewport.
						These must be at least as large as the visible dimensions of the display being rendered to. See <function
						moreinfo="refentry">glViewport</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MINMAX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether pixel minmax values are
						computed. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glMinmax</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MODELVIEW_MATRIX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns sixteen values: the modelview matrix on the top of the modelview
						matrix stack. Initially this matrix is the identity matrix. See <function
						moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_MODELVIEW_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of matrices on the modelview matrix stack. The
						initial value is 1. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NAME_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of names on the selection name stack. The
						initial value is 0. See <function moreinfo="refentry">glPushName</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NORMAL_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value, indicating whether the normal array is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glNormalPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NORMAL_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive normals in the normal
						array. The initial value is 0. See <function moreinfo="refentry">glNormalPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NORMAL_ARRAY_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the data type of each coordinate in the normal array. The
						initial value is <constant>GL_FLOAT</constant>. See <function
						moreinfo="refentry">glNormalPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NORMALIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether normals are automatically
						scaled to unit length after they have been transformed to eye coordinates. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glNormal</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_ALIGNMENT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte alignment used for writing pixel data to memory.
						The initial value is 4. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_IMAGE_HEIGHT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the image height used for writing pixel data to memory.
						The initial value is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_LSB_FIRST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether single-bit pixels being
						written to memory are written first to the least significant bit of each unsigned byte. The initial value
						is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_ROW_LENGTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the row length used for writing pixel data to memory. The
						initial value is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_SKIP_IMAGES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of pixel images skipped before the first pixel
						is written into memory. The initial value is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_SKIP_PIXELS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of pixel locations skipped before the first
						pixel is written into memory. The initial value is 0. See <function
						moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_SKIP_ROWS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of rows of pixel locations skipped before the
						first pixel is written into memory. The initial value is 0. See <function
						moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PACK_SWAP_BYTES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the bytes of two-byte and
						four-byte pixel indices and components are swapped before being written to memory. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PERSPECTIVE_CORRECTION_HINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the mode of the perspective
						correction hint. The initial value is <constant>GL_DONT_CARE</constant>. See <function
						moreinfo="refentry">glHint</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_A_TO_A_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the alpha-to-alpha pixel translation table.
						The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_B_TO_B_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the blue-to-blue pixel translation table. The
						initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_G_TO_G_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the green-to-green pixel translation table.
						The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_I_TO_A_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the index-to-alpha pixel translation table.
						The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_I_TO_B_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the index-to-blue pixel translation table. The
						initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_I_TO_G_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the index-to-green pixel translation table.
						The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_I_TO_I_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the index-to-index pixel translation table.
						The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_I_TO_R_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the index-to-red pixel translation table. The
						initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_R_TO_R_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the red-to-red pixel translation table. The
						initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PIXEL_MAP_S_TO_S_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size of the stencil-to-stencil pixel translation
						table. The initial value is 1. See <function moreinfo="refentry">glPixelMap</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the point size as specified by <function
						moreinfo="refentry">glPointSize</function>. The initial value is 1.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SIZE_GRANULARITY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the size difference between adjacent supported sizes for
						antialiased points. See <function moreinfo="refentry">glPointSize</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SIZE_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: the smallest and largest supported sizes for antialiased
						points. The smallest size must be at most 1, and the largest size must be at least 1. See <function
						moreinfo="refentry">glPointSize</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SMOOTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether antialiasing of points is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPointSize</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the mode of the point
						antialiasing hint. The initial value is <constant>GL_DONT_CARE</constant>. See <function
						moreinfo="refentry">glHint</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values: symbolic constants indicating whether front-facing and
						back-facing polygons are rasterized as points, lines, or filled polygons. The initial value is
						<constant>GL_FILL</constant>. See <function moreinfo="refentry">glPolygonMode</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_OFFSET_FACTOR</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the scaling factor used to determine the variable offset
						that is added to the depth value of each fragment generated when a polygon is rasterized. The initial value
						is 0. See <function moreinfo="refentry">glPolygonOffset</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_OFFSET_UNITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value. This value is multiplied by an implementation-specific
						value and then added to the depth value of each fragment generated when a polygon is rasterized. The
						initial value is 0. See <function moreinfo="refentry">glPolygonOffset</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_OFFSET_FILL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether polygon offset is enabled
						for polygons in fill mode. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPolygonOffset</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_OFFSET_LINE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether polygon offset is enabled
						for polygons in line mode. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPolygonOffset</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_OFFSET_POINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether polygon offset is enabled
						for polygons in point mode. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPolygonOffset</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_SMOOTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether antialiasing of polygons is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPolygonMode</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating the mode of the polygon
						antialiasing hint. The initial value is <constant>GL_DONT_CARE</constant>. See <function
						moreinfo="refentry">glHint</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_STIPPLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether polygon stippling is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glPolygonStipple</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_COLOR_TABLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether post color matrix
						transformation lookup is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glColorTable</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red bias factor applied to RGBA fragments after color
						matrix transformations. The initial value is 0. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green bias factor applied to RGBA fragments after
						color matrix transformations. The initial value is 0. See <function
						moreinfo="refentry">glPixelTransfer</function>
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue bias factor applied to RGBA fragments after color
						matrix transformations. The initial value is 0. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha bias factor applied to RGBA fragments after
						color matrix transformations. The initial value is 0. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red scale factor applied to RGBA fragments after color
						matrix transformations. The initial value is 1. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green scale factor applied to RGBA fragments after
						color matrix transformations. The initial value is 1. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue scale factor applied to RGBA fragments after
						color matrix transformations. The initial value is 1. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha scale factor applied to RGBA fragments after
						color matrix transformations. The initial value is 1. See <function
						moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_COLOR_TABLE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether post convolution lookup is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glColorTable</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_RED_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red bias factor applied to RGBA fragments after
						convolution. The initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green bias factor applied to RGBA fragments after
						convolution. The initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue bias factor applied to RGBA fragments after
						convolution. The initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha bias factor applied to RGBA fragments after
						convolution. The initial value is 0. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_RED_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red scale factor applied to RGBA fragments after
						convolution. The initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the green scale factor applied to RGBA fragments after
						convolution. The initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the blue scale factor applied to RGBA fragments after
						convolution. The initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the alpha scale factor applied to RGBA fragments after
						convolution. The initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PROJECTION_MATRIX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns sixteen values: the projection matrix on the top of the projection
						matrix stack. Initially this matrix is the identity matrix. See <function
						moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PROJECTION_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of matrices on the projection matrix stack. The
						initial value is 1. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_READ_BUFFER</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating which color buffer is
						selected for reading. The initial value is <constant>GL_BACK</constant> if there is a back buffer,
						otherwise it is <constant>GL_FRONT</constant>. See <function moreinfo="refentry">glReadPixels</function>
						and <function moreinfo="refentry">glAccum</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RED_BIAS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red bias factor used during pixel transfers. The
						initial value is 0.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RED_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of red bitplanes in each color buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RED_SCALE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the red scale factor used during pixel transfers. The
						initial value is 1. See <function moreinfo="refentry">glPixelTransfer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RENDER_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating whether the GL is in
						render, select, or feedback mode. The initial value is <constant>GL_RENDER</constant>. See <function
						moreinfo="refentry">glRenderMode</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RESCALE_NORMAL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns single boolean value indicating whether normal rescaling is enabled.
						See <function moreinfo="refentry">glEnable</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_RGBA_MODE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the GL is in RGBA mode
						(true) or color index mode (false). See <function moreinfo="refentry">glColor</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SCISSOR_BOX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the <inlineequation>
							<mml:math>
								<mml:mi>x</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>y</mml:mi>
							</mml:math>
						</inlineequation> window coordinates of the scissor box, followed by its width and height. Initially the
						<inlineequation>
							<mml:math>
								<mml:mi>x</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>y</mml:mi>
							</mml:math>
						</inlineequation> window coordinates are both 0 and the width and height are set to the size of the window.
						See <function moreinfo="refentry">glScissor</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SCISSOR_TEST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether scissoring is enabled. The
						initial value is <constant>GL_FALSE</constant>. See <function moreinfo="refentry">glScissor</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SELECTION_BUFFER_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> return one value, the size of the selection buffer. See <function
						moreinfo="refentry">glSelectBuffer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SEPARABLE_2D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D separable convolution is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glSeparableFilter2D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SHADE_MODEL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating whether the shading mode is
						flat or smooth. The initial value is <constant>GL_SMOOTH</constant>. See <function
						moreinfo="refentry">glShadeModel</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SMOOTH_LINE_WIDTH_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values, the smallest and largest supported widths for antialiased
						lines. See <function moreinfo="refentry">glLineWidth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SMOOTH_LINE_WIDTH_GRANULARITY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the granularity of widths for antialiased lines. See
						<function moreinfo="refentry">glLineWidth</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SMOOTH_POINT_SIZE_RANGE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns two values, the smallest and largest supported widths for antialiased
						points. See <function moreinfo="refentry">glPointSize</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SMOOTH_POINT_SIZE_GRANULARITY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the granularity of sizes for antialiased points. See
						<function moreinfo="refentry">glPointSize</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of bitplanes in the stencil buffer.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_CLEAR_VALUE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the index to which the stencil bitplanes are cleared. The
						initial value is 0. See <function moreinfo="refentry">glClearStencil</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_FAIL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating what action is taken when
						the stencil test fails. The initial value is <constant>GL_KEEP</constant>. See <function
						moreinfo="refentry">glStencilOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_FUNC</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating what function is used to
						compare the stencil reference value with the stencil buffer value. The initial value is
						<constant>GL_ALWAYS</constant>. See <function moreinfo="refentry">glStencilFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_PASS_DEPTH_FAIL</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating what action is taken when
						the stencil test passes, but the depth test fails. The initial value is <constant>GL_KEEP</constant>. See
						<function moreinfo="refentry">glStencilOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_PASS_DEPTH_PASS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, a symbolic constant indicating what action is taken when
						the stencil test passes and the depth test passes. The initial value is <constant>GL_KEEP</constant>. See
						<function moreinfo="refentry">glStencilOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_REF</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the reference value that is compared with the contents of
						the stencil buffer. The initial value is 0. See <function moreinfo="refentry">glStencilFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_TEST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether stencil testing of
						fragments is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glStencilFunc</function> and <function moreinfo="refentry">glStencilOp</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_VALUE_MASK</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the mask that is used to mask both the stencil reference
						value and the stencil buffer value before they are compared. The initial value is all 1's. See <function
						moreinfo="refentry">glStencilFunc</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STENCIL_WRITEMASK</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the mask that controls writing of the stencil bitplanes.
						The initial value is all 1's. See <function moreinfo="refentry">glStencilMask</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_STEREO</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether stereo buffers (left and
						right) are supported.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_SUBPIXEL_BITS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, an estimate of the number of bits of subpixel resolution
						that are used to position rasterized geometry in window coordinates. The initial value is 4.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_1D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 1D texture mapping is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glTexImage1D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_BINDING_1D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single value, the name of the texture currently bound to the target
						<constant>GL_TEXTURE_1D</constant>. The initial value is 0. See <function
						moreinfo="refentry">glBindTexture</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_2D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 2D texture mapping is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glTexImage2D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_BINDING_2D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single value, the name of the texture currently bound to the target
						<constant>GL_TEXTURE_2D</constant>. The initial value is 0. See <function
						moreinfo="refentry">glBindTexture</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_3D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether 3D texture mapping is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glTexImage3D</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_BINDING_3D</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single value, the name of the texture currently bound to the target
						<constant>GL_TEXTURE_3D</constant>. The initial value is 0. See <function
						moreinfo="refentry">glBindTexture</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_COORD_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the texture coordinate
						array is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glTexCoordPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_COORD_ARRAY_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of coordinates per element in the texture
						coordinate array. The initial value is 4. See <function moreinfo="refentry">glTexCoordPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_COORD_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive elements in the
						texture coordinate array. The initial value is 0. See <function
						moreinfo="refentry">glTexCoordPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_COORD_ARRAY_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the data type of the coordinates in the texture coordinate
						array. The initial value is <constant>GL_FLOAT</constant>. See <function
						moreinfo="refentry">glTexCoordPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_GEN_Q</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether automatic generation of the
						<parameter>q</parameter> texture coordinate is enabled. The initial value is <constant>GL_FALSE</constant>.
						See <function moreinfo="refentry">glTexGen</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_GEN_R</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether automatic generation of the
						<parameter>r</parameter> texture coordinate is enabled. The initial value is <constant>GL_FALSE</constant>.
						See <function moreinfo="refentry">glTexGen</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_GEN_S</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether automatic generation of the
						<parameter>S</parameter> texture coordinate is enabled. The initial value is <constant>GL_FALSE</constant>.
						See <function moreinfo="refentry">glTexGen</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_GEN_T</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether automatic generation of the
						T texture coordinate is enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glTexGen</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_MATRIX</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns sixteen values: the texture matrix on the top of the texture matrix
						stack. Initially this matrix is the identity matrix. See <function
						moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_TEXTURE_STACK_DEPTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of matrices on the texture matrix stack. The
						initial value is 1. See <function moreinfo="refentry">glPushMatrix</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_ALIGNMENT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte alignment used for reading pixel data from
						memory. The initial value is 4. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_IMAGE_HEIGHT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the image height used for reading pixel data from memory.
						The initial is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_LSB_FIRST</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether single-bit pixels being
						read from memory are read first from the least significant bit of each unsigned byte. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_ROW_LENGTH</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the row length used for reading pixel data from memory.
						The initial value is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_SKIP_IMAGES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of pixel images skipped before the first pixel
						is read from memory. The initial value is 0. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_SKIP_PIXELS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of pixel locations skipped before the first
						pixel is read from memory. The initial value is 0. See <function
						moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_SKIP_ROWS</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of rows of pixel locations skipped before the
						first pixel is read from memory. The initial value is 0. See <function
						moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_UNPACK_SWAP_BYTES</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the bytes of two-byte and
						four-byte pixel indices and components are swapped after being read from memory. The initial value is
						<constant>GL_FALSE</constant>. See <function moreinfo="refentry">glPixelStore</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_VERTEX_ARRAY</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns a single boolean value indicating whether the vertex array is
						enabled. The initial value is <constant>GL_FALSE</constant>. See <function
						moreinfo="refentry">glVertexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_VERTEX_ARRAY_SIZE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the number of coordinates per vertex in the vertex array.
						The initial value is 4. See <function moreinfo="refentry">glVertexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_VERTEX_ARRAY_STRIDE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the byte offset between consecutive vertexes in the vertex
						array. The initial value is 0. See <function moreinfo="refentry">glVertexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_VERTEX_ARRAY_TYPE</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the data type of each coordinate in the vertex array. The
						initial value is <constant>GL_FLOAT</constant>. See <function
						moreinfo="refentry">glVertexPointer</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_VIEWPORT</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns four values: the <inlineequation>
							<mml:math>
								<mml:mi>x</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>y</mml:mi>
							</mml:math>
						</inlineequation> window coordinates of the viewport, followed by its width and height. Initially the
						<inlineequation>
							<mml:math>
								<mml:mi>x</mml:mi>
							</mml:math>
						</inlineequation> and <inlineequation>
							<mml:math>
								<mml:mi>y</mml:mi>
							</mml:math>
						</inlineequation> window coordinates are both set to 0, and the width and height are set to the width and
						height of the window into which the GL will do its rendering. See <function
						moreinfo="refentry">glViewport</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ZOOM_X</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the <inlineequation>
							<mml:math>
								<mml:mi>x</mml:mi>
							</mml:math>
						</inlineequation> pixel zoom factor. The initial value is 1. See <function
						moreinfo="refentry">glPixelZoom</function>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ZOOM_Y</constant></term>
				<listitem>
					<simpara>
						<parameter>params</parameter> returns one value, the <inlineequation>
							<mml:math>
								<mml:mi>y</mml:mi>
							</mml:math>
						</inlineequation> pixel zoom factor. The initial value is 1. See <function
						moreinfo="refentry">glPixelZoom</function>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Many of the boolean parameters can also be queried more easily using <function
			moreinfo="refentry">glIsEnabled</function>.
		</para>
	</refsect1>
	<refsect1 id="glGet.3G-notes">
		<title>Notes</title>
		<para>
			<constant>GL_COLOR_LOGIC_OP</constant>, <constant>GL_COLOR_ARRAY</constant>, <constant>GL_COLOR_ARRAY_SIZE</constant>,
			<constant>GL_COLOR_ARRAY_STRIDE</constant>, <constant>GL_COLOR_ARRAY_TYPE</constant>,
			<constant>GL_EDGE_FLAG_ARRAY</constant>, <constant>GL_EDGE_FLAG_ARRAY_STRIDE</constant>,
			<constant>GL_INDEX_ARRAY</constant>, <constant>GL_INDEX_ARRAY_STRIDE</constant>,
			<constant>GL_INDEX_ARRAY_TYPE</constant>, <constant>GL_INDEX_LOGIC_OP</constant>, <constant>GL_NORMAL_ARRAY</constant>,
			<constant>GL_NORMAL_ARRAY_STRIDE</constant>, <constant>GL_NORMAL_ARRAY_TYPE</constant>,
			<constant>GL_POLYGON_OFFSET_UNITS</constant>, <constant>GL_POLYGON_OFFSET_FACTOR</constant>,
			<constant>GL_POLYGON_OFFSET_FILL</constant>, <constant>GL_POLYGON_OFFSET_LINE</constant>,
			<constant>GL_POLYGON_OFFSET_POINT</constant>, <constant>GL_TEXTURE_COORD_ARRAY</constant>,
			<constant>GL_TEXTURE_COORD_ARRAY_SIZE</constant>, <constant>GL_TEXTURE_COORD_ARRAY_STRIDE</constant>,
			<constant>GL_TEXTURE_COORD_ARRAY_TYPE</constant>, <constant>GL_VERTEX_ARRAY</constant>,
			<constant>GL_VERTEX_ARRAY_SIZE</constant>, <constant>GL_VERTEX_ARRAY_STRIDE</constant>, and
			<constant>GL_VERTEX_ARRAY_TYPE</constant> are available only if the GL version is 1.1 or greater.
		</para>
		<para>
			<constant>GL_ALIASED_POINT_SIZE_RANGE</constant>, <constant>GL_ALIASED_POINT_SIZE_GRANULARITY</constant>,
			<constant>GL_FEEDBACK_BUFFER_SIZE</constant>, <constant>GL_FEEDBACK_BUFFER_TYPE</constant>,
			<constant>GL_LIGHT_MODEL_AMBIENT</constant>, <constant>GL_LIGHT_MODEL_COLOR_CONTROL</constant>,
			<constant>GL_MAX_3D_TEXTURE_SIZE</constant>, <constant>GL_MAX_ELEMENTS_INDICES</constant>,
			<constant>GL_MAX_ELEMENTS_VERTICES</constant>, <constant>GL_PACK_IMAGE_HEIGHT</constant>,
			<constant>GL_PACK_SKIP_IMAGES</constant>, <constant>GL_RESCALE_NORMAL</constant>,
			<constant>GL_SELECTION_BUFFER_SIZE</constant>, <constant>GL_SMOOTH_LINE_WIDTH_GRANULARITY</constant>,
			<constant>GL_SMOOTH_LINE_WIDTH_RANGE</constant>, <constant>GL_SMOOTH_POINT_SIZE_GRANULARITY</constant>,
			<constant>GL_SMOOTH_POINT_SIZE_RANGE</constant>, <constant>GL_TEXTURE_3D</constant>,
			<constant>GL_TEXTURE_BINDING_3D</constant>, <constant>GL_UNPACK_IMAGE_HEIGHT</constant>, and
			<constant>GL_UNPACK_SKIP_IMAGES</constant> are available only if the GL version is 1.2 or greater.
		</para>
		<para>
			<constant>GL_LINE_WIDTH_GRANULARITY</constant> was deprecated in GL version 1.2. Its functionality was replaced by
			<constant>GL_SMOOTH_LINE_WIDTH_GRANULARITY</constant>.
		</para>
		<para>
			<constant>GL_LINE_WIDTH_RANGE</constant> was deprecated in GL version 1.2. Its functionality was replaced by
			<constant>GL_SMOOTH_LINE_WIDTH_RANGE</constant>.
		</para>
		<para>
			<constant>GL_POINT_SIZE_GRANULARITY</constant> was deprecated in GL version 1.2. Its functionality was replaced by
			<constant>GL_SMOOTH_POINT_SIZE_GRANULARITY</constant>.
		</para>
		<para>
			<constant>GL_POINT_SIZE_RANGE</constant> was deprecated in GL version 1.2. Its functionality was replaced by
			<constant>GL_SMOOTH_POINT_SIZE_RANGE</constant>.
		</para>
		<para>
			<constant>GL_BLEND_COLOR</constant>, <constant>GL_BLEND_EQUATION</constant>, <constant>GL_COLOR_MATRIX</constant>,
			<constant>GL_COLOR_MATRIX_STACK_DEPTH</constant>, <constant>GL_COLOR_TABLE</constant>,
			<constant>GL_CONVOLUTION_1D</constant>, <constant>GL_CONVOLUTION_2D</constant>, <constant>GL_HISTOGRAM</constant>,
			<constant>GL_MAX_COLOR_MATRIX_STACK_DEPTH</constant>, <constant>GL_MINMAX</constant>,
			<constant>GL_POST_COLOR_MATRIX_COLOR_TABLE</constant>, <constant>GL_POST_COLOR_MATRIX_RED_BIAS</constant>,
			<constant>GL_POST_COLOR_MATRIX_GREEN_BIAS</constant>, <constant>GL_POST_COLOR_MATRIX_BLUE_BIAS</constant>,
			<constant>GL_POST_COLOR_MATRIX_ALPHA_BIAS</constant>, <constant>GL_POST_COLOR_MATRIX_RED_SCALE</constant>,
			<constant>GL_POST_COLOR_MATRIX_GREEN_SCALE</constant>, <constant>GL_POST_COLOR_MATRIX_BLUE_SCALE</constant>,
			<constant>GL_POST_COLOR_MATRIX_ALPHA_SCALE</constant>, <constant>GL_POST_CONVOLUTION_COLOR_TABLE</constant>,
			<constant>GL_POST_CONVOLUTION_RED_BIAS</constant>, <constant>GL_POST_CONVOLUTION_GREEN_BIAS</constant>,
			<constant>GL_POST_CONVOLUTION_BLUE_BIAS</constant>, <constant>GL_POST_CONVOLUTION_ALPHA_BIAS</constant>,
			<constant>GL_POST_CONVOLUTION_RED_SCALE</constant>, <constant>GL_POST_CONVOLUTION_GREEN_SCALE</constant>,
			<constant>GL_POST_CONVOLUTION_BLUE_SCALE</constant>, <constant>GL_POST_CONVOLUTION_ALPHA_SCALE</constant>, and
			<constant>GL_SEPARABLE_2D</constant> are available only if <constant>GL_ARB_imaging</constant> is returned from
			<function moreinfo="refentry">glGet</function> when called with the argument <constant>GL_EXTENSIONS</constant>.
		</para>
		<para>
			<constant>GL_ACTIVE_TEXTURE_ARB</constant>, <constant>GL_CLIENT_ACTIVE_TEXTURE_ARB</constant>, and
			<constant>GL_MAX_TEXTURE_UNITS_ARB</constant> are available only if <constant>GL_ARB_multitexture</constant> is
			returned from <function moreinfo="refentry">glGet</function> when called with the argument
			<constant>GL_EXTENSIONS</constant>.
		</para>
		<para>
			When the <constant>GL_ARB_multitexture</constant> extension is supported, the following parameters return the
			associated value for the active texture unit: <constant>GL_CURRENT_RASTER_TEXTURE_COORDS</constant>,
			<constant>GL_TEXTURE_1D</constant>, <constant>GL_TEXTURE_BINDING_1D</constant>, <constant>GL_TEXTURE_2D</constant>,
			<constant>GL_TEXTURE_BINDING_2D</constant>, <constant>GL_TEXTURE_3D</constant>,
			<constant>GL_TEXTURE_BINDING_3D</constant>, <constant>GL_TEXTURE_GEN_S</constant>,
			<constant>GL_TEXTURE_GEN_T</constant>, <constant>GL_TEXTURE_GEN_R</constant>, <constant>GL_TEXTURE_GEN_Q</constant>,
			<constant>GL_TEXTURE_MATRIX</constant>, and <constant>GL_TEXTURE_STACK_DEPTH</constant>. Likewise, the following
			parameters return the associated value for the active client texture unit: <constant>GL_TEXTURE_COORD_ARRAY</constant>,
			<constant>GL_TEXTURE_COORD_ARRAY_SIZE</constant>, <constant>GL_TEXTURE_COORD_ARRAY_STRIDE</constant>,
			<constant>GL_TEXTURE_COORD_ARRAY_TYPE</constant>.
		</para>
	</refsect1>
	<refsect1 id="glGet.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>pname</parameter> is not an accepted value.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function moreinfo="refentry">glGet</function> is executed
			between the execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glGet.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glGetClipPlane</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetColorTable</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetColorTableParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetConvolutionFilter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetConvolutionParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetError</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetHistogram</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetHistogramParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetLight</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetMap</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetMaterial</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetMinmax</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetMinmaxParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetPixelMap</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetPointerv</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetPolygonStipple</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetSeparableFilter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetString</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetTexEnv</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetTexGen</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetTexImage</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetTexLevelParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glGetTexParameter</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glIsEnabled</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
