<refentry id="glFeedbackBuffer.3G">
	<refmeta id="glFeedbackBuffer.3G-meta">
		<refentrytitle>glFeedbackBuffer</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glFeedbackBuffer.3G-name">
		<refname>glFeedbackBuffer</refname>
		<refpurpose>controls feedback mode</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glFeedbackBuffer.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glFeedbackBuffer</function></funcdef>
				<paramdef>GLsizei&nbsp;<parameter>size</parameter></paramdef>
				<paramdef>GLenum&nbsp;<parameter>type</parameter></paramdef>
				<paramdef>GLfloat&nbsp;*<parameter>buffer</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glFeedbackBuffer.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>size</parameter></term>
				<listitem>
					<simpara>
						Specifies the maximum number of values that can be written into <parameter>buffer</parameter>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>type</parameter></term>
				<listitem>
					<simpara>
						Specifies a symbolic constant that describes the information that will be returned for each vertex.
						<constant>GL_2D</constant>, <constant>GL_3D</constant>, <constant>GL_3D_COLOR</constant>,
						<constant>GL_3D_COLOR_TEXTURE</constant>, and <constant>GL_4D_COLOR_TEXTURE</constant> are accepted.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>buffer</parameter></term>
				<listitem>
					<simpara>
						Returns the feedback data.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glFeedbackBuffer.3G-description">
		<title>Description</title>
		<para>
			The <function>glFeedbackBuffer</function> function controls feedback. Feedback, like selection, is a GL mode. The mode
			is selected by calling <function moreinfo="refentry">glRenderMode</function> with <constant>GL_FEEDBACK</constant>.
			When the GL is in feedback mode, no pixels are produced by rasterization. Instead, information about primitives that
			would have been rasterized is fed back to the application using the GL.
		</para>
		<para>
			<function>glFeedbackBuffer</function> has three arguments: <parameter>buffer</parameter> is a pointer to an array of
			floating-point values into which feedback information is placed. <parameter>size</parameter> indicates the size of the
			array. <parameter>type</parameter> is a symbolic constant describing the information that is fed back for each vertex.
			<function>glFeedbackBuffer</function> must be issued before feedback mode is enabled (by calling <function
			moreinfo="refentry">glRenderMode</function> with argument <constant>GL_FEEDBACK</constant>). Setting
			<constant>GL_FEEDBACK</constant> without establishing the feedback buffer, or calling
			<function>glFeedbackBuffer</function> while the GL is in feedback mode, is an error.
		</para>
		<para>
			When <function moreinfo="refentry">glRenderMode</function> is called while in feedback mode, it returns the number of
			entries placed in the feedback array, and resets the feedback array pointer to the base of the feedback buffer. The
			returned value never exceeds <parameter>size</parameter>. If the feedback data required more room than was available in
			<parameter>buffer</parameter>, <function moreinfo="refentry">glRenderMode</function> returns a negative value. To take
			the GL out of feedback mode, call <function moreinfo="refentry">glRenderMode</function> with a parameter value other
			than <constant>GL_FEEDBACK</constant>.
		</para>
		<para>
			While in feedback mode, each primitive, bitmap, or pixel rectangle that would be rasterized generates a block of values
			that are copied into the feedback array. If doing so would cause the number of entries to exceed the maximum, the block
			is partially written so as to fill the array (if there is any room left at all), and an overflow flag is set. Each
			block begins with a code indicating the primitive type, followed by values that describe the primitive's vertices and
			associated data. Entries are also written for bitmaps and pixel rectangles. Feedback occurs after polygon culling and
			<function moreinfo="refentry">glPolygonMode</function> interpretation of polygons has taken place, so polygons that are
			culled are not returned in the feedback buffer. It can also occur after polygons with more than three edges are broken
			up into triangles, if the GL implementation renders polygons by performing this decomposition.
		</para>
		<para>
			The <function moreinfo="refentry">glPassThrough</function> command can be used to insert a marker into the feedback
			buffer. See <function moreinfo="refentry">glPassThrough</function>.
		</para>
		<para>
			Following is the grammar for the blocks of values written into the feedback buffer. Each primitive is indicated with a
			unique identifying value followed by some number of vertices. Polygon entries include an integer value indicating how
			many vertices follow. A vertex is fed back as some number of floating-point values, as determined by
			<parameter>type</parameter>. Colors are fed back as four values in RGBA mode and one value in color index mode.
			feedbackList &larr; feedbackItem feedbackList feedbackItem feedbackItem &larr; point lineSegment polygon bitmap
			pixelRectangle passThru point &larr; <constant>GL_POINT_TOKEN</constant> vertex lineSegment &larr;
			<constant>GL_LINE_TOKEN</constant> vertex vertex <constant>GL_LINE_RESET_TOKEN</constant> vertex vertex polygon &larr;
			<constant>GL_POLYGON_TOKEN</constant> n polySpec polySpec &larr; polySpec vertex vertex vertex vertex bitmap &larr;
			<constant>GL_BITMAP_TOKEN</constant> vertex pixelRectangle &larr; <constant>GL_DRAW_PIXEL_TOKEN</constant> vertex
			<constant>GL_COPY_PIXEL_TOKEN</constant> vertex passThru &larr; <constant>GL_PASS_THROUGH_TOKEN</constant> value vertex
			&larr; 2d 3d 3dColor 3dColorTexture 4dColorTexture 2d &larr; value value 3d &larr; value value value 3dColor &larr;
			value value value color 3dColorTexture &larr; value value value color tex 4dColorTexture &larr; value value value value
			color tex color &larr; rgba index rgba &larr; value value value value index &larr; value tex &larr; value value value
			value
		</para>
		<para>
			<emphasis>value</emphasis>is a floating-point number, and <emphasis>n</emphasis>is a floating-point integer giving the
			number of vertices in the polygon. <constant>GL_POINT_TOKEN</constant>, <constant>GL_LINE_TOKEN</constant>,
			<constant>GL_LINE_RESET_TOKEN</constant>, <constant>GL_POLYGON_TOKEN</constant>, <constant>GL_BITMAP_TOKEN</constant>,
			<constant>GL_DRAW_PIXEL_TOKEN</constant>, <constant>GL_COPY_PIXEL_TOKEN</constant> and
			<constant>GL_PASS_THROUGH_TOKEN</constant> are symbolic floating-point constants.
			<constant>GL_LINE_RESET_TOKEN</constant> is returned whenever the line stipple pattern is reset. The data returned as a
			vertex depends on the feedback <parameter>type</parameter>.
		</para>
		<para>
			The following table gives the correspondence between <parameter>type</parameter> and the number of values per vertex.
			<parameter>k</parameter> is 1 in color index mode and 4 in RGBA mode.
		</para>
		<informaltable frame="topbot">
			<tgroup cols="5">
				<tbody>
					<row>
						<entry><emphasis role="bold">Type</emphasis></entry>
						<entry><emphasis role="bold">Coordinates</emphasis></entry>
						<entry align="center"><emphasis role="bold">Color</emphasis></entry>
						<entry align="center"><emphasis role="bold">Texture</emphasis></entry>
						<entry align="center"><emphasis role="bold">Total Number of Values</emphasis></entry>
					</row>
					<row>
						<entry><constant>GL_2D</constant></entry>
						<entry><parameter>x</parameter>, <parameter>y</parameter></entry>
						<entry align="center"/>
						<entry align="center"/>
						<entry align="center">2</entry>
					</row>
					<row>
						<entry><constant>GL_3D</constant></entry>
						<entry><parameter>x</parameter>, <parameter>y</parameter>, <parameter>z</parameter></entry>
						<entry align="center"/>
						<entry align="center"/>
						<entry align="center">3</entry>
					</row>
					<row>
						<entry><constant>GL_3D_COLOR</constant></entry>
						<entry><parameter>x</parameter>, <parameter>y</parameter>, <parameter>z</parameter></entry>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mi>k</mml:mi>
							</mml:math>
						</inlineequation></entry>
						<entry align="center"/>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mrow>
									<mml:mn>3</mml:mn>
									<mml:mo>+</mml:mo>
									<mml:mi>k</mml:mi>
								</mml:mrow>
							</mml:math>
						</inlineequation></entry>
					</row>
					<row>
						<entry><constant>GL_3D_COLOR_TEXTURE</constant></entry>
						<entry><parameter>x</parameter>, <parameter>y</parameter>, <parameter>z</parameter>,</entry>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mi>k</mml:mi>
							</mml:math>
						</inlineequation></entry>
						<entry align="center">4</entry>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mrow>
									<mml:mn>7</mml:mn>
									<mml:mo>+</mml:mo>
									<mml:mi>k</mml:mi>
								</mml:mrow>
							</mml:math>
						</inlineequation></entry>
					</row>
					<row>
						<entry><constant>GL_4D_COLOR_TEXTURE</constant></entry>
						<entry><parameter>x</parameter>, <parameter>y</parameter>, <parameter>z</parameter>,
						<parameter>w</parameter></entry>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mi>k</mml:mi>
							</mml:math>
						</inlineequation></entry>
						<entry align="center">4</entry>
						<entry align="center"><inlineequation>
							<mml:math>
								<mml:mrow>
									<mml:mn>8</mml:mn>
									<mml:mo>+</mml:mo>
									<mml:mi>k</mml:mi>
								</mml:mrow>
							</mml:math>
						</inlineequation></entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		<para>
			Feedback vertex coordinates are in window coordinates, except <parameter>w</parameter>, which is in clip coordinates.
			Feedback colors are lighted, if lighting is enabled. Feedback texture coordinates are generated, if texture coordinate
			generation is enabled. They are always transformed by the texture matrix.
		</para>
	</refsect1>
	<refsect1 id="glFeedbackBuffer.3G-notes">
		<title>Notes</title>
		<para>
			<function>glFeedbackBuffer</function>, when used in a display list, is not compiled into the display list but is
			executed immediately.
		</para>
		<para>
			When the <constant>GL_ARB_multitexture</constant> extension is supported, <function>glFeedbackBuffer</function> returns
			only the texture coordinates of texture unit <constant>GL_TEXTURE0_ARB</constant>.
		</para>
	</refsect1>
	<refsect1 id="glFeedbackBuffer.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>type</parameter> is not an accepted value.
		</para>
		<para>
			<constant>GL_INVALID_VALUE</constant> is generated if <parameter>size</parameter> is negative.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glFeedbackBuffer</function> is called while the
			render mode is <constant>GL_FEEDBACK</constant>, or if <function moreinfo="refentry">glRenderMode</function> is called
			with argument <constant>GL_FEEDBACK</constant> before <function>glFeedbackBuffer</function> is called at least once.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glFeedbackBuffer</function> is executed between the
			execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glFeedbackBuffer.3G-associated_gets">
		<title>Associated Gets</title>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_RENDER_MODE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_FEEDBACK_BUFFER_POINTER</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_FEEDBACK_BUFFER_SIZE</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_FEEDBACK_BUFFER_TYPE</constant>
		</para>
	</refsect1>
	<refsect1 id="glFeedbackBuffer.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glBegin</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glLineStipple</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPassThrough</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glPolygonMode</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glRenderMode</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glSelectBuffer</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
