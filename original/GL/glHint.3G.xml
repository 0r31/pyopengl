<refentry id="glHint.3G">
	<refmeta id="glHint.3G-meta">
		<refentrytitle>glHint</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glHint.3G-name">
		<refname>glHint</refname>
		<refpurpose>specify implementation-specific hints</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glHint.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glHint</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>target</parameter></paramdef>
				<paramdef>GLenum&nbsp;<parameter>mode</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glHint.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>target</parameter></term>
				<listitem>
					<simpara>
						Specifies a symbolic constant indicating the behavior to be controlled. <constant>GL_FOG_HINT</constant>,
						<constant>GL_LINE_SMOOTH_HINT</constant>, <constant>GL_PERSPECTIVE_CORRECTION_HINT</constant>,
						<constant>GL_POINT_SMOOTH_HINT</constant>, and <constant>GL_POLYGON_SMOOTH_HINT</constant> are accepted.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>mode</parameter></term>
				<listitem>
					<simpara>
						Specifies a symbolic constant indicating the desired behavior. <constant>GL_FASTEST</constant>,
						<constant>GL_NICEST</constant>, and <constant>GL_DONT_CARE</constant> are accepted.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glHint.3G-description">
		<title>Description</title>
		<para>
			Certain aspects of GL behavior, when there is room for interpretation, can be controlled with hints. A hint is
			specified with two arguments. <parameter>target</parameter> is a symbolic constant indicating the behavior to be
			controlled, and <parameter>mode</parameter> is another symbolic constant indicating the desired behavior. The initial
			value for each <parameter>target</parameter> is <constant>GL_DONT_CARE</constant>. <parameter>mode</parameter> can be
			one of the following:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GL_FASTEST</constant></term>
				<listitem>
					<simpara>
						The most efficient option should be chosen.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NICEST</constant></term>
				<listitem>
					<simpara>
						The most correct, or highest quality, option should be chosen.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_DONT_CARE</constant></term>
				<listitem>
					<simpara>
						No preference.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Though the implementation aspects that can be hinted are well defined, the interpretation of the hints depends on the
			implementation. The hint aspects that can be specified with <parameter>target</parameter>, along with suggested
			semantics, are as follows:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GL_FOG_HINT</constant></term>
				<listitem>
					<simpara>
						Indicates the accuracy of fog calculation. If per-pixel fog calculation is not efficiently supported by the
						GL implementation, hinting <constant>GL_DONT_CARE</constant> or <constant>GL_FASTEST</constant> can result
						in per-vertex calculation of fog effects.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LINE_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						Indicates the sampling quality of antialiased lines. If a larger filter function is applied, hinting
						<constant>GL_NICEST</constant> can result in more pixel fragments being generated during rasterization,
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_PERSPECTIVE_CORRECTION_HINT</constant></term>
				<listitem>
					<simpara>
						Indicates the quality of color and texture coordinate interpolation. If perspective-corrected parameter
						interpolation is not efficiently supported by the GL implementation, hinting
						<constant>GL_DONT_CARE</constant> or <constant>GL_FASTEST</constant> can result in simple linear
						interpolation of colors and/or texture coordinates.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POINT_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						Indicates the sampling quality of antialiased points. If a larger filter function is applied, hinting
						<constant>GL_NICEST</constant> can result in more pixel fragments being generated during rasterization,
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_POLYGON_SMOOTH_HINT</constant></term>
				<listitem>
					<simpara>
						Indicates the sampling quality of antialiased polygons. Hinting <constant>GL_NICEST</constant> can result
						in more pixel fragments being generated during rasterization, if a larger filter function is applied.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glHint.3G-notes">
		<title>Notes</title>
		<para>
			The interpretation of hints depends on the implementation. Some implementations ignore <function>glHint</function>
			settings.
		</para>
	</refsect1>
	<refsect1 id="glHint.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if either <parameter>target</parameter> or
			<parameter>mode</parameter> is not an accepted value.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glHint</function> is executed between the execution
			of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
</refentry>
