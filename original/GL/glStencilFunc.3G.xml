<refentry id="glStencilFunc.3G">
	<refmeta id="glStencilFunc.3G-meta">
		<refentrytitle>glStencilFunc</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="glStencilFunc.3G-name">
		<refname>glStencilFunc</refname>
		<refpurpose>set function and reference value for stencil testing</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="glStencilFunc.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>glStencilFunc</function></funcdef>
				<paramdef>GLenum&nbsp;<parameter>func</parameter></paramdef>
				<paramdef>GLint&nbsp;<parameter>ref</parameter></paramdef>
				<paramdef>GLuint&nbsp;<parameter>mask</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="glStencilFunc.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>func</parameter></term>
				<listitem>
					<simpara>
						Specifies the test function. Eight tokens are valid: <constant>GL_NEVER</constant>,
						<constant>GL_LESS</constant>, <constant>GL_LEQUAL</constant>, <constant>GL_GREATER</constant>,
						<constant>GL_GEQUAL</constant>, <constant>GL_EQUAL</constant>, <constant>GL_NOTEQUAL</constant>, and
						<constant>GL_ALWAYS</constant>. The initial value is <constant>GL_ALWAYS</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>ref</parameter></term>
				<listitem>
					<simpara>
						Specifies the reference value for the stencil test. <parameter>ref</parameter> is clamped to the range
						[0,<inlineequation>
							<mml:math>
								<mml:mrow>
									<mml:msup>
										<mml:mn>2</mml:mn>
										<mml:mi>n</mml:mi>
									</mml:msup>
									<mml:mo>-</mml:mo>
									<mml:mn>1</mml:mn>
								</mml:mrow>
							</mml:math>
						</inlineequation>], where <inlineequation>
							<mml:math>
								<mml:mi>n</mml:mi>
							</mml:math>
						</inlineequation> is the number of bitplanes in the stencil buffer. The initial value is 0.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>mask</parameter></term>
				<listitem>
					<simpara>
						Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is
						done. The initial value is all 1's.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glStencilFunc.3G-description">
		<title>Description</title>
		<para>
			Stenciling, like depth-buffering, enables and disables drawing on a per-pixel basis. You draw into the stencil planes
			using GL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the
			screen. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals,
			outlining, and constructive solid geometry rendering.
		</para>
		<para>
			The stencil test conditionally eliminates a pixel based on the outcome of a comparison between the reference value and
			the value in the stencil buffer. To enable and disable the test, call <function moreinfo="refentry">glEnable</function>
			and <function moreinfo="refentry">glDisable</function> with argument <constant>GL_STENCIL_TEST</constant>. To specify
			actions based on the outcome of the stencil test, call <function moreinfo="refentry">glStencilOp</function>.
		</para>
		<para>
			<parameter>func</parameter> is a symbolic constant that determines the stencil comparison function. It accepts one of
			eight values, shown in the following list. <parameter>ref</parameter> is an integer reference value that is used in the
			stencil comparison. It is clamped to the range [0,<inlineequation>
				<mml:math>
					<mml:mrow>
						<mml:msup>
							<mml:mn>2</mml:mn>
							<mml:mi>n</mml:mi>
						</mml:msup>
						<mml:mo>-</mml:mo>
						<mml:mn>1</mml:mn>
					</mml:mrow>
				</mml:math>
			</inlineequation>], where <inlineequation>
				<mml:math>
					<mml:mi>n</mml:mi>
				</mml:math>
			</inlineequation> is the number of bitplanes in the stencil buffer. <parameter>mask</parameter> is bitwise ANDed with
			both the reference value and the stored stencil value, with the ANDed values participating in the comparison.
		</para>
		<para>
			If <parameter>stencil</parameter> represents the value stored in the corresponding stencil buffer location, the
			following list shows the effect of each comparison function that can be specified by <parameter>func</parameter>. Only
			if the comparison succeeds is the pixel passed through to the next stage in the rasterization process (see
			<citerefentry>
				<refentrytitle>glStencilOp</refentrytitle>
				<manvolnum>3G</manvolnum>
			</citerefentry>). All tests treat <parameter>stencil</parameter> values as unsigned integers in the range
			[0,<inlineequation>
				<mml:math>
					<mml:mrow>
						<mml:msup>
							<mml:mn>2</mml:mn>
							<mml:mi>n</mml:mi>
						</mml:msup>
						<mml:mo>-</mml:mo>
						<mml:mn>1</mml:mn>
					</mml:mrow>
				</mml:math>
			</inlineequation>], where <inlineequation>
				<mml:math>
					<mml:mi>n</mml:mi>
				</mml:math>
			</inlineequation> is the number of bitplanes in the stencil buffer.
		</para>
		<para>
			The following values are accepted by <parameter>func</parameter>:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GL_NEVER</constant></term>
				<listitem>
					<simpara>
						Always fails.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LESS</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) &lt; (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_LEQUAL</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) &le; (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_GREATER</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) &gt; (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_GEQUAL</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) &ge; (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_EQUAL</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) = (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_NOTEQUAL</constant></term>
				<listitem>
					<simpara>
						Passes if ( <parameter>ref</parameter> &amp; <parameter>mask</parameter> ) &ne; (
						<parameter>stencil</parameter> &amp; <parameter>mask</parameter> ).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GL_ALWAYS</constant></term>
				<listitem>
					<simpara>
						Always passes.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="glStencilFunc.3G-notes">
		<title>Notes</title>
		<para>
			Initially, the stencil test is disabled. If there is no stencil buffer, no stencil modification can occur and it is as
			if the stencil test always passes.
		</para>
	</refsect1>
	<refsect1 id="glStencilFunc.3G-errors">
		<title>Errors</title>
		<para>
			<constant>GL_INVALID_ENUM</constant> is generated if <parameter>func</parameter> is not one of the eight accepted
			values.
		</para>
		<para>
			<constant>GL_INVALID_OPERATION</constant> is generated if <function>glStencilFunc</function> is executed between the
			execution of <function moreinfo="refentry">glBegin</function> and the corresponding execution of <function
			moreinfo="refentry">glEnd</function>.
		</para>
	</refsect1>
	<refsect1 id="glStencilFunc.3G-associated_gets">
		<title>Associated Gets</title>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_STENCIL_FUNC</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_STENCIL_VALUE_MASK</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_STENCIL_REF</constant>
		</para>
		<para>
			<function moreinfo="refentry">glGet</function> with argument <constant>GL_STENCIL_BITS</constant>
		</para>
		<para>
			<function moreinfo="refentry">glIsEnabled</function> with argument <constant>GL_STENCIL_TEST</constant>
		</para>
	</refsect1>
	<refsect1 id="glStencilFunc.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glAlphaFunc</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glBlendFunc</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glDepthFunc</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glEnable</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glIsEnabled</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glLogicOp</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glStencilOp</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
