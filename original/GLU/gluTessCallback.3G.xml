<refentry id="gluTessCallback.3G">
	<refmeta id="gluTessCallback.3G-meta">
		<refentrytitle>gluTessCallback</refentrytitle>
		<manvolnum>3G</manvolnum>
	</refmeta>
	<refnamediv id="gluTessCallback.3G-name">
		<refname>gluTessCallback</refname>
		<refpurpose>define a callback for a tessellation object</refpurpose>
	</refnamediv>
	<refsynopsisdiv id="gluTessCallback.3G-c_spec">
		<title>C Specification</title>
		<funcsynopsis>
			<funcprototype>
				<funcdef>void&nbsp;<function>gluTessCallback</function></funcdef>
				<paramdef>GLUtesselator*&nbsp;<parameter>tess</parameter></paramdef>
				<paramdef>GLenum&nbsp;<parameter>which</parameter></paramdef>
				<paramdef>_GLfuncptr&nbsp;<parameter>CallBackFunc</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="gluTessCallback.3G-parameters">
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>tess</parameter></term>
				<listitem>
					<simpara>
						Specifies the tessellation object (created with <function moreinfo="refentry">gluNewTess</function>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>which</parameter></term>
				<listitem>
					<simpara>
						Specifies the callback being defined. The following values are valid: <constant>GLU_TESS_BEGIN</constant>,
						<constant>GLU_TESS_BEGIN_DATA</constant>, <constant>GLU_TESS_EDGE_FLAG</constant>,
						<constant>GLU_TESS_EDGE_FLAG_DATA</constant>, <constant>GLU_TESS_VERTEX</constant>,
						<constant>GLU_TESS_VERTEX_DATA</constant>, <constant>GLU_TESS_END</constant>,
						<constant>GLU_TESS_END_DATA</constant>, <constant>GLU_TESS_COMBINE</constant>,
						<constant>GLU_TESS_COMBINE_DATA</constant>, <constant>GLU_TESS_ERROR</constant>, and
						<constant>GLU_TESS_ERROR_DATA</constant>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>CallBackFunc</parameter></term>
				<listitem>
					<simpara>
						Specifies the function to be called.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="gluTessCallback.3G-description">
		<title>Description</title>
		<para>
			<function>gluTessCallback</function> is used to indicate a callback to be used by a tessellation object. If the
			specified callback is already defined, then it is replaced. If <parameter>CallBackFunc</parameter> is
			<constant>NULL</constant>, then the existing callback becomes undefined.
		</para>
		<para>
			These callbacks are used by the tessellation object to describe how a polygon specified by the user is broken into
			triangles. Note that there are two versions of each callback: one with user-specified polygon data and one without. If
			both versions of a particular callback are specified, then the callback with user-specified polygon data will be used.
			Note that the <parameter>polygon_data</parameter> parameter used by some of the functions is a copy of the pointer that
			was specified when <function moreinfo="refentry">gluTessBeginPolygon</function> was called. The legal callbacks are as
			follows:
		</para>
		<variablelist>
			<varlistentry>
				<term><constant>GLU_TESS_BEGIN</constant></term>
				<listitem>
					<simpara>
						The begin callback is invoked like <function moreinfo="refentry">glBegin</function> to indicate the start
						of a (triangle) primitive. The function takes a single argument of type GLenum. If the
						<constant>GLU_TESS_BOUNDARY_ONLY</constant> property is set to <constant>GL_FALSE</constant>, then the
						argument is set to either <constant>GL_TRIANGLE_FAN</constant>, <constant>GL_TRIANGLE_STRIP</constant>, or
						<constant>GL_TRIANGLES</constant>. If the <constant>GLU_TESS_BOUNDARY_ONLY</constant> property is set to
						<constant>GL_TRUE</constant>, then the argument will be set to <constant>GL_LINE_LOOP</constant>. The
						function prototype for this callback is: void begin ( GLenum type );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_BEGIN_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_BEGIN</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void beginData ( GLenum type, void *polygon_data );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_EDGE_FLAG</constant></term>
				<listitem>
					<simpara>
						The edge flag callback is similar to <function moreinfo="refentry">glEdgeFlag</function>. The function
						takes a single boolean flag that indicates which edges lie on the polygon boundary. If the flag is
						<constant>GL_TRUE</constant>, then each vertex that follows begins an edge that lies on the polygon
						boundary, that is, an edge that separates an interior region from an exterior one. If the flag is
						<constant>GL_FALSE</constant>, then each vertex that follows begins an edge that lies in the polygon
						interior. The edge flag callback (if defined) is invoked before the first vertex callback.
					</simpara>
					<simpara>
						Since triangle fans and triangle strips do not support edge flags, the begin callback is not called with
						<constant>GL_TRIANGLE_FAN</constant> or <constant>GL_TRIANGLE_STRIP</constant> if a
						non-<constant>NULL</constant> edge flag callback is provided. (If the callback is initialized to
						<constant>NULL</constant>, there is no impact on performance). Instead, the fans and strips are converted
						to independent triangles. The function prototype for this callback is: void edgeFlag ( GLboolean flag );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_EDGE_FLAG_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_EDGE_FLAG</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void edgeFlagData ( GLboolean flag, void *polygon_data );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_VERTEX</constant></term>
				<listitem>
					<simpara>
						The vertex callback is invoked between the begin and end callbacks. It is similar to <function
						moreinfo="refentry">glVertex</function>, and it defines the vertices of the triangles created by the
						tessellation process. The function takes a pointer as its only argument. This pointer is identical to the
						opaque pointer provided by the user when the vertex was described (see <citerefentry>
							<refentrytitle>gluTessVertex</refentrytitle>
							<manvolnum>3G</manvolnum>
						</citerefentry>). The function prototype for this callback is: void vertex ( void *vertex_data );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_VERTEX_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_VERTEX</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void vertexData ( void *vertex_data, void *polygon_data );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_END</constant></term>
				<listitem>
					<simpara>
						The end callback serves the same purpose as <function moreinfo="refentry">glEnd</function>. It indicates
						the end of a primitive and it takes no arguments. The function prototype for this callback is: void end (
						void );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_END_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_END</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void endData ( void *polygon_data);
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_COMBINE</constant></term>
				<listitem>
					<simpara>
						The combine callback is called to create a new vertex when the tessellation detects an intersection, or
						wishes to merge features. The function takes four arguments: an array of three elements each of type
						GLdouble, an array of four pointers, an array of four elements each of type GLfloat, and a pointer to a
						pointer. The prototype is: void combine( GLdouble coords[3], void *vertex_data[4], GLfloat weight[4], void
						**outData );
					</simpara>
					<simpara>
						The vertex is defined as a linear combination of up to four existing vertices, stored in
						<parameter>vertex_data</parameter>. The coefficients of the linear combination are given by
						<parameter>weight</parameter>; these weights always add up to 1. All vertex pointers are valid even when
						some of the weights are 0. <parameter>coords</parameter> gives the location of the new vertex.
					</simpara>
					<simpara>
						The user must allocate another vertex, interpolate parameters using <parameter>vertex_data</parameter> and
						<parameter>weight</parameter>, and return the new vertex pointer in <parameter>outData</parameter>. This
						handle is supplied during rendering callbacks. The user is responsible for freeing the memory some time
						after <function moreinfo="refentry">gluTessEndPolygon</function> is called.
					</simpara>
					<simpara>
						For example, if the polygon lies in an arbitrary plane in 3-space, and a color is associated with each
						vertex, the <constant>GLU_TESS_COMBINE</constant> callback might look like this: void myCombine( GLdouble
						coords[3], VERTEX *d[4], GLfloat w[4], VERTEX **dataOut ) { VERTEX *new = new_vertex(); new-&gt;x =
						coords[0]; new-&gt;y = coords[1]; new-&gt;z = coords[2]; new-&gt;r = w[0]*d[0]-&gt;r + w[1]*d[1]-&gt;r +
						w[2]*d[2]-&gt;r + w[3]*d[3]-&gt;r; new-&gt;g = w[0]*d[0]-&gt;g + w[1]*d[1]-&gt;g + w[2]*d[2]-&gt;g +
						w[3]*d[3]-&gt;g; new-&gt;b = w[0]*d[0]-&gt;b + w[1]*d[1]-&gt;b + w[2]*d[2]-&gt;b + w[3]*d[3]-&gt;b;
						new-&gt;a = w[0]*d[0]-&gt;a + w[1]*d[1]-&gt;a + w[2]*d[2]-&gt;a + w[3]*d[3]-&gt;a; *dataOut = new; }
					</simpara>
					<simpara>
						If the tessellation detects an intersection, then the <constant>GLU_TESS_COMBINE</constant> or
						<constant>GLU_TESS_COMBINE_DATA</constant> callback (see below) must be defined, and it must write a
						non-<constant>NULL</constant> pointer into <parameter>dataOut</parameter>. Otherwise the
						<constant>GLU_TESS_NEED_COMBINE_CALLBACK</constant> error occurs, and no output is generated.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_COMBINE_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_COMBINE</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void combineData ( GLdouble coords[3], void *vertex_data[4], GLfloat weight[4], void **outData, void
						*polygon_data );
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_ERROR</constant></term>
				<listitem>
					<simpara>
						The error callback is called when an error is encountered. The one argument is of type GLenum; it indicates
						the specific error that occurred and will be set to one of
						<constant>GLU_TESS_MISSING_BEGIN_POLYGON</constant>, <constant>GLU_TESS_MISSING_END_POLYGON</constant>,
						<constant>GLU_TESS_MISSING_BEGIN_CONTOUR</constant>, <constant>GLU_TESS_MISSING_END_CONTOUR</constant>,
						<constant>GLU_TESS_COORD_TOO_LARGE</constant>, <constant>GLU_TESS_NEED_COMBINE_CALLBACK</constant> or
						<constant>GLU_OUT_OF_MEMORY</constant>. Character strings describing these errors can be retrieved with the
						<function moreinfo="refentry">gluErrorString</function> call. The function prototype for this callback is:
						void error ( GLenum errno );
					</simpara>
					<simpara>
						The GLU library will recover from the first four errors by inserting the missing call(s).
						<constant>GLU_TESS_COORD_TOO_LARGE</constant> indicates that some vertex coordinate exceeded the predefined
						constant <constant>GLU_TESS_MAX_COORD</constant> in absolute value, and that the value has been clamped.
						(Coordinate values must be small enough so that two can be multiplied together without overflow.)
						<constant>GLU_TESS_NEED_COMBINE_CALLBACK</constant> indicates that the tessellation detected an
						intersection between two edges in the input data, and the <constant>GLU_TESS_COMBINE</constant> or
						<constant>GLU_TESS_COMBINE_DATA</constant> callback was not provided. No output is generated.
						<constant>GLU_OUT_OF_MEMORY</constant> indicates that there is not enough memory so no output is generated.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><constant>GLU_TESS_ERROR_DATA</constant></term>
				<listitem>
					<simpara>
						The same as the <constant>GLU_TESS_ERROR</constant> callback except that it takes an additional pointer
						argument. This pointer is identical to the opaque pointer provided when <function
						moreinfo="refentry">gluTessBeginPolygon</function> was called. The function prototype for this callback is:
						void errorData ( GLenum errno, void *polygon_data );
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsect1>
	<refsect1 id="gluTessCallback.3G-example">
		<title>Example</title>
		<para>
			Polygons tessellated can be rendered directly like this: gluTessCallback(tobj, GLU_TESS_BEGIN, glBegin);
			gluTessCallback(tobj, GLU_TESS_VERTEX, glVertex3dv); gluTessCallback(tobj, GLU_TESS_END, glEnd); gluTessCallback(tobj,
			GLU_TESS_COMBINE, myCombine); gluTessBeginPolygon(tobj, <constant>NULL</constant>); gluTessBeginContour(tobj);
			gluTessVertex(tobj, v, v); ... gluTessEndContour(tobj); gluTessEndPolygon(tobj); Typically, the tessellated polygon
			should be stored in a display list so that it does not need to be retessellated every time it is rendered.
		</para>
	</refsect1>
	<refsect1 id="gluTessCallback.3G-see_also">
		<title>See Also</title>
		<para>
			<simplelist type="inline">
				<member><citerefentry>
					<refentrytitle>glBegin</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glEdgeFlag</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>glVertex</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluNewTess</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluErrorString</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluTessVertex</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluTessBeginPolygon</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluTessBeginContour</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluTessProperty</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
				<member><citerefentry>
					<refentrytitle>gluTessNormal</refentrytitle>
					<manvolnum>3G</manvolnum>
				</citerefentry></member>
			</simplelist>
		</para>
	</refsect1>
</refentry>
