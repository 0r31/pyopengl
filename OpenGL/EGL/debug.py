"""Debug utilities for EGL operations"""
from OpenGL.EGL import *
def eglErrorName(value):
    """Returns error constant if known, otherwise returns value"""
    return KNOWN_ERRORS.get(value,value)
KNOWN_ERRORS = {
    EGL_SUCCESS:EGL_SUCCESS,
    EGL_NOT_INITIALIZED:EGL_NOT_INITIALIZED,
    EGL_BAD_ACCESS:EGL_BAD_ACCESS,
    EGL_BAD_ALLOC:EGL_BAD_ALLOC,
    EGL_BAD_ATTRIBUTE:EGL_BAD_ATTRIBUTE,
    EGL_BAD_CONTEXT:EGL_BAD_CONTEXT,
    EGL_BAD_CONFIG:EGL_BAD_CONFIG,
    EGL_BAD_CURRENT_SURFACE:EGL_BAD_CURRENT_SURFACE,
    EGL_BAD_DISPLAY:EGL_BAD_DISPLAY,
    EGL_BAD_SURFACE:EGL_BAD_SURFACE,
    EGL_BAD_MATCH:EGL_BAD_MATCH,
    EGL_BAD_PARAMETER:EGL_BAD_PARAMETER,
    EGL_BAD_NATIVE_PIXMAP:EGL_BAD_NATIVE_PIXMAP,
    EGL_BAD_NATIVE_WINDOW:EGL_BAD_NATIVE_WINDOW,
    EGL_CONTEXT_LOST:EGL_CONTEXT_LOST,
}

def debug_config(display,config):
    """Get debug display for the given configuration"""
    result = {}
    value = EGLint()
    for attr in CONFIG_ATTRS:
        eglGetConfigAttrib(display,config, attr, value)
        if attr in BITMASK_FIELDS:
            attr_value = {
            }
            for subattr in BITMASK_FIELDS[attr]:
                if value.value & subattr:
                    attr_value[subattr.name] = True 
        else:
            attr_value = value.value
        result[attr.name] = attr_value
    return result

SURFACE_TYPE_BITS = [
    EGL_MULTISAMPLE_RESOLVE_BOX_BIT,
    EGL_PBUFFER_BIT,
    EGL_PIXMAP_BIT,
    EGL_SWAP_BEHAVIOR_PRESERVED_BIT,
    EGL_VG_ALPHA_FORMAT_PRE_BIT,
    EGL_VG_COLORSPACE_LINEAR_BIT,
    EGL_WINDOW_BIT,
]    
RENDERABLE_TYPE_BITS = [
    EGL_OPENGL_BIT,
    EGL_OPENGL_ES_BIT,
    EGL_OPENGL_ES2_BIT,
    EGL_OPENVG_BIT,
]
CAVEAT_BITS = [
    EGL_NONE,
    EGL_SLOW_CONFIG,
    EGL_NON_CONFORMANT_CONFIG,
]
TRANSPARENT_BITS = [
    EGL_NONE,
    EGL_TRANSPARENT_RGB,
]

CONFIG_ATTRS = [
    EGL_ALPHA_SIZE,
    EGL_ALPHA_MASK_SIZE,
    EGL_BIND_TO_TEXTURE_RGB,
    EGL_BIND_TO_TEXTURE_RGBA,
    EGL_BLUE_SIZE,
    EGL_BUFFER_SIZE,
    EGL_COLOR_BUFFER_TYPE,
    EGL_CONFIG_CAVEAT,
    EGL_CONFIG_ID,
    EGL_CONFORMANT,
    EGL_DEPTH_SIZE,
    EGL_GREEN_SIZE,
    EGL_LEVEL,
    EGL_LUMINANCE_SIZE,
    EGL_MAX_PBUFFER_WIDTH,
    EGL_MAX_PBUFFER_HEIGHT,
    EGL_MAX_PBUFFER_PIXELS,
    EGL_MAX_SWAP_INTERVAL,
    EGL_MIN_SWAP_INTERVAL,
    EGL_NATIVE_RENDERABLE,
    EGL_NATIVE_VISUAL_ID,
    EGL_NATIVE_VISUAL_TYPE,
    EGL_RED_SIZE,
    EGL_RENDERABLE_TYPE,
    EGL_SAMPLE_BUFFERS,
    EGL_SAMPLES,
    EGL_STENCIL_SIZE,
    EGL_SURFACE_TYPE,
    EGL_TRANSPARENT_TYPE,
    EGL_TRANSPARENT_RED_VALUE,
    EGL_TRANSPARENT_GREEN_VALUE,
    EGL_TRANSPARENT_BLUE_VALUE,
]

BITMASK_FIELDS = dict([
    (EGL_SURFACE_TYPE,SURFACE_TYPE_BITS),
    (EGL_RENDERABLE_TYPE,RENDERABLE_TYPE_BITS),
    (EGL_CONFORMANT,RENDERABLE_TYPE_BITS),
    (EGL_CONFIG_CAVEAT,CAVEAT_BITS),
    (EGL_TRANSPARENT_TYPE,TRANSPARENT_BITS),
])
